--------------------------------------------------------
-- Archivo creado  - miércoles-agosto-28-2024   
--------------------------------------------------------
DROP SEQUENCE "DBADMIN"."SECUENCIA_PEDIDO";
DROP SEQUENCE "DBADMIN"."SEQ_DEVOLUCION";
DROP SEQUENCE "DBADMIN"."SEQ_ID_SUCURSAL";
DROP TABLE "DBADMIN"."ACCESORIO" cascade constraints;
DROP TABLE "DBADMIN"."AUDITORIA_EMPLEADO" cascade constraints;
DROP TABLE "DBADMIN"."AUDITORIA_ROL" cascade constraints;
DROP TABLE "DBADMIN"."AUDITORIA_SUCURSAL" cascade constraints;
DROP TABLE "DBADMIN"."AUDITORIA_USUARIOS" cascade constraints;
DROP TABLE "DBADMIN"."AUDIT_SESION" cascade constraints;
DROP TABLE "DBADMIN"."CATEGORIA" cascade constraints;
DROP TABLE "DBADMIN"."CLIENTE" cascade constraints;
DROP TABLE "DBADMIN"."DETALLE_PEDIDO" cascade constraints;
DROP TABLE "DBADMIN"."DEVOLUCION" cascade constraints;
DROP TABLE "DBADMIN"."EMPLEADO" cascade constraints;
DROP TABLE "DBADMIN"."PEDIDO" cascade constraints;
DROP TABLE "DBADMIN"."PRODUCTO" cascade constraints;
DROP TABLE "DBADMIN"."ROL" cascade constraints;
DROP TABLE "DBADMIN"."SUCURSAL" cascade constraints;
DROP TABLE "DBADMIN"."USUARIO" cascade constraints;
DROP TABLE "DBADMIN"."VENTA" cascade constraints;
DROP VIEW "DBADMIN"."VISTAACCESORIOS";
DROP VIEW "DBADMIN"."VISTACATEGORIAS";
DROP VIEW "DBADMIN"."VISTACLIENTES";
DROP VIEW "DBADMIN"."VISTADETALLESDEDIDO";
DROP VIEW "DBADMIN"."VISTADEVOLUCIONES";
DROP VIEW "DBADMIN"."VISTAEMPLEADOS";
DROP VIEW "DBADMIN"."VISTAPEDIDOS";
DROP VIEW "DBADMIN"."VISTAPRODUCTOS";
DROP VIEW "DBADMIN"."VISTASUCURSALES";
DROP VIEW "DBADMIN"."VISTAUSUARIOS";
DROP VIEW "DBADMIN"."VISTAVENTAS";
DROP PROCEDURE "DBADMIN"."CONSULTARCATEGORIA";
DROP PROCEDURE "DBADMIN"."CONSULTARCLIENTES";
DROP PROCEDURE "DBADMIN"."CONSULTARDETALLEPEDIDO";
DROP PROCEDURE "DBADMIN"."CONSULTARPEDIDOS";
DROP PROCEDURE "DBADMIN"."CONSULTARPRODUCTOS";
DROP PROCEDURE "DBADMIN"."CONSULTARSUCURSAL";
DROP PROCEDURE "DBADMIN"."CONSULTARUSUARIOPORUSERNAME";
DROP PROCEDURE "DBADMIN"."CONSULTARUSUARIOS";
DROP PROCEDURE "DBADMIN"."CONSULTARVENTA";
DROP PROCEDURE "DBADMIN"."DESACTIVARUSUARIO";
DROP PROCEDURE "DBADMIN"."ELIMINARACCESORIO";
DROP PROCEDURE "DBADMIN"."ELIMINARCATEGORIA";
DROP PROCEDURE "DBADMIN"."ELIMINARCLIENTE";
DROP PROCEDURE "DBADMIN"."ELIMINARDETALLEPEDIDO";
DROP PROCEDURE "DBADMIN"."ELIMINARDEVOLUCION";
DROP PROCEDURE "DBADMIN"."ELIMINAREMPLEADO";
DROP PROCEDURE "DBADMIN"."ELIMINARPEDIDOS";
DROP PROCEDURE "DBADMIN"."ELIMINARPRODUCTO";
DROP PROCEDURE "DBADMIN"."ELIMINARROL";
DROP PROCEDURE "DBADMIN"."ELIMINARSUCURSAL";
DROP PROCEDURE "DBADMIN"."ELIMINARUSUARIO";
DROP PROCEDURE "DBADMIN"."ELIMINARVENTA";
DROP PROCEDURE "DBADMIN"."FILTRARCLIENTES";
DROP PROCEDURE "DBADMIN"."FILTRARDETALLEPEDIDO";
DROP PROCEDURE "DBADMIN"."FILTRARPEDIDOS";
DROP PROCEDURE "DBADMIN"."FILTRARPRODUCTOS";
DROP PROCEDURE "DBADMIN"."FILTRARUSUARIOSPORNOMBRE";
DROP PROCEDURE "DBADMIN"."MODIFICARCATEGORIA";
DROP PROCEDURE "DBADMIN"."MODIFICARCLIENTE";
DROP PROCEDURE "DBADMIN"."MODIFICARDETALLEPEDIDO";
DROP PROCEDURE "DBADMIN"."MODIFICARDEVOLUCION";
DROP PROCEDURE "DBADMIN"."MODIFICAREMPLEADO";
DROP PROCEDURE "DBADMIN"."MODIFICARPEDIDO";
DROP PROCEDURE "DBADMIN"."MODIFICARPRODUCTO";
DROP PROCEDURE "DBADMIN"."MODIFICARSUCURSAL";
DROP PROCEDURE "DBADMIN"."MODIFICARUSUARIO";
DROP PROCEDURE "DBADMIN"."MODIFICARVENTA";
DROP PROCEDURE "DBADMIN"."REGISTRARACCESORIO";
DROP PROCEDURE "DBADMIN"."REGISTRARCATEGORIA";
DROP PROCEDURE "DBADMIN"."REGISTRARCLIENTE";
DROP PROCEDURE "DBADMIN"."REGISTRARDETALLEPEDIDO";
DROP PROCEDURE "DBADMIN"."REGISTRARDEVOLUCION";
DROP PROCEDURE "DBADMIN"."REGISTRAREMPLEADO";
DROP PROCEDURE "DBADMIN"."REGISTRARPEDIDO";
DROP PROCEDURE "DBADMIN"."REGISTRARPRODUCTO";
DROP PROCEDURE "DBADMIN"."REGISTRARROL";
DROP PROCEDURE "DBADMIN"."REGISTRARSUCURSAL";
DROP PROCEDURE "DBADMIN"."REGISTRARUSUARIO";
DROP PROCEDURE "DBADMIN"."REGISTRARVENTA";
DROP PACKAGE "DBADMIN"."CLIENTE_PKG";
DROP PACKAGE "DBADMIN"."DEVOLUCION_PKG";
DROP PACKAGE "DBADMIN"."EMPLEADO_PKG";
DROP PACKAGE "DBADMIN"."PKG_ACCESORIOS";
DROP PACKAGE "DBADMIN"."PKG_CATEGORIA";
DROP PACKAGE "DBADMIN"."PKG_DETALLE_PEDIDO";
DROP PACKAGE "DBADMIN"."PKG_PEDIDOS";
DROP PACKAGE "DBADMIN"."PKG_PRODUCTOS";
DROP PACKAGE "DBADMIN"."PKG_ROL";
DROP PACKAGE "DBADMIN"."PKG_SUCURSAL";
DROP PACKAGE "DBADMIN"."PKG_USUARIO";
DROP PACKAGE "DBADMIN"."PKG_VENTA";
DROP PACKAGE BODY "DBADMIN"."CLIENTE_PKG";
DROP PACKAGE BODY "DBADMIN"."DEVOLUCION_PKG";
DROP PACKAGE BODY "DBADMIN"."EMPLEADO_PKG";
DROP PACKAGE BODY "DBADMIN"."PKG_ACCESORIOS";
DROP PACKAGE BODY "DBADMIN"."PKG_CATEGORIA";
DROP PACKAGE BODY "DBADMIN"."PKG_DETALLE_PEDIDO";
DROP PACKAGE BODY "DBADMIN"."PKG_PEDIDOS";
DROP PACKAGE BODY "DBADMIN"."PKG_PRODUCTOS";
DROP PACKAGE BODY "DBADMIN"."PKG_ROL";
DROP PACKAGE BODY "DBADMIN"."PKG_SUCURSAL";
DROP PACKAGE BODY "DBADMIN"."PKG_USUARIO";
DROP PACKAGE BODY "DBADMIN"."PKG_VENTA";
DROP FUNCTION "DBADMIN"."CALCULAR_IVA_VENTA";
DROP FUNCTION "DBADMIN"."CLIENTE_ACTIVO";
DROP FUNCTION "DBADMIN"."CONTAR_PEDIDOS_CLIENTE";
DROP FUNCTION "DBADMIN"."OBTENER_DESCRIPCION_CATEGORIA";
DROP FUNCTION "DBADMIN"."OBTENER_ESTADO_PEDIDO";
DROP FUNCTION "DBADMIN"."OBTENER_NOMBRE_COMPLETO_CLIENTE";
DROP FUNCTION "DBADMIN"."OBTENER_NOMBRE_COMPLETO_EMPLEADO";
DROP FUNCTION "DBADMIN"."OBTENER_NOMBRE_PRODUCTO";
DROP FUNCTION "DBADMIN"."OBTENER_NOMBRE_SUCURSAL";
DROP FUNCTION "DBADMIN"."OBTENER_TOTAL_PEDIDO";
DROP FUNCTION "DBADMIN"."PRODUCTO_EN_STOCK";
DROP FUNCTION "DBADMIN"."TOTAL_DEVOLUCIONES_PRODUCTO";
DROP FUNCTION "DBADMIN"."TOTAL_INGRESOS_SUCURSAL";
DROP FUNCTION "DBADMIN"."TOTAL_STOCK_PRODUCTOS";
DROP FUNCTION "DBADMIN"."TOTAL_VENTAS_CLIENTE";
--------------------------------------------------------
--  DDL for Sequence SECUENCIA_PEDIDO
--------------------------------------------------------

   CREATE SEQUENCE  "DBADMIN"."SECUENCIA_PEDIDO"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 15 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_DEVOLUCION
--------------------------------------------------------

   CREATE SEQUENCE  "DBADMIN"."SEQ_DEVOLUCION"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ID_SUCURSAL
--------------------------------------------------------

   CREATE SEQUENCE  "DBADMIN"."SEQ_ID_SUCURSAL"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 42 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Table ACCESORIO
--------------------------------------------------------

  CREATE TABLE "DBADMIN"."ACCESORIO" 
   (	"ID_ACCESORIO" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NOMBRE" VARCHAR2(100 BYTE), 
	"DESCRIPCION" VARCHAR2(500 BYTE), 
	"PRECIO" NUMBER(10,2), 
	"STOCK" NUMBER, 
	"ID_CATEGORIA" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Table AUDITORIA_EMPLEADO
--------------------------------------------------------

  CREATE TABLE "DBADMIN"."AUDITORIA_EMPLEADO" 
   (	"ID_AUDITORIA" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ID_EMPLEADO" NUMBER, 
	"NOMBRE" VARCHAR2(100 BYTE), 
	"APELLIDO" VARCHAR2(100 BYTE), 
	"CORREO" VARCHAR2(200 BYTE), 
	"TELEFONO" VARCHAR2(20 BYTE), 
	"ID_SUCURSAL" NUMBER, 
	"ACTIVO" NUMBER(1,0), 
	"OPERACION" VARCHAR2(10 BYTE), 
	"FECHA_OPERACION" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"USUARIO" VARCHAR2(30 BYTE) DEFAULT USER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Table AUDITORIA_ROL
--------------------------------------------------------

  CREATE TABLE "DBADMIN"."AUDITORIA_ROL" 
   (	"ID_AUDITORIA" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ID_ROL" NUMBER, 
	"NOMBRE" VARCHAR2(20 BYTE), 
	"OPERACION" VARCHAR2(10 BYTE), 
	"FECHA_OPERACION" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"USUARIO" VARCHAR2(30 BYTE) DEFAULT USER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Table AUDITORIA_SUCURSAL
--------------------------------------------------------

  CREATE TABLE "DBADMIN"."AUDITORIA_SUCURSAL" 
   (	"ID_AUDITORIA" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ID_SUCURSAL" NUMBER, 
	"NOMBRE" VARCHAR2(100 BYTE), 
	"UBICACION" VARCHAR2(200 BYTE), 
	"TELEFONO" VARCHAR2(20 BYTE), 
	"OPERACION" VARCHAR2(10 BYTE), 
	"FECHA_OPERACION" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"USUARIO" VARCHAR2(30 BYTE) DEFAULT USER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Table AUDITORIA_USUARIOS
--------------------------------------------------------

  CREATE TABLE "DBADMIN"."AUDITORIA_USUARIOS" 
   (	"ID_AUDITORIA" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ID_USUARIO" NUMBER, 
	"ACCION" VARCHAR2(50 BYTE), 
	"DESCRIPCION" VARCHAR2(255 BYTE), 
	"USUARIO_ACCION" VARCHAR2(100 BYTE), 
	"FECHA_ACCION" DATE DEFAULT SYSDATE, 
	"DETALLE_ANTERIOR" VARCHAR2(255 BYTE), 
	"DETALLE_NUEVO" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Table AUDIT_SESION
--------------------------------------------------------

  CREATE TABLE "DBADMIN"."AUDIT_SESION" 
   (	"ID_AUDIT" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"USERNAME" VARCHAR2(100 BYTE), 
	"OPERATION" VARCHAR2(20 BYTE), 
	"TIMESTAMP" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"SESSION_ID" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Table CATEGORIA
--------------------------------------------------------

  CREATE TABLE "DBADMIN"."CATEGORIA" 
   (	"ID_CATEGORIA" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NOMBRE" VARCHAR2(100 BYTE), 
	"ACTIVO" NUMBER(1,0), 
	"DESCRIPCION" VARCHAR2(500 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Table CLIENTE
--------------------------------------------------------

  CREATE TABLE "DBADMIN"."CLIENTE" 
   (	"ID_CLIENTE" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NOMBRE" VARCHAR2(100 BYTE), 
	"APELLIDO" VARCHAR2(100 BYTE), 
	"TELEFONO" VARCHAR2(20 BYTE), 
	"CORREO" VARCHAR2(200 BYTE), 
	"DIRECCION" VARCHAR2(500 BYTE), 
	"ACTIVO" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Table DETALLE_PEDIDO
--------------------------------------------------------

  CREATE TABLE "DBADMIN"."DETALLE_PEDIDO" 
   (	"ID_DETALLE" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ID_PEDIDO" NUMBER, 
	"ID_PRODUCTO" NUMBER, 
	"CANTIDAD" NUMBER, 
	"PRECIO" NUMBER(10,2), 
	"TOTAL" NUMBER(10,2)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Table DEVOLUCION
--------------------------------------------------------

  CREATE TABLE "DBADMIN"."DEVOLUCION" 
   (	"ID_DEVOLUCION" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ID_DETALLE" NUMBER, 
	"FECHA_DEVOLUCION" DATE, 
	"CANTIDAD" NUMBER, 
	"MOTIVO" VARCHAR2(500 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Table EMPLEADO
--------------------------------------------------------

  CREATE TABLE "DBADMIN"."EMPLEADO" 
   (	"ID_EMPLEADO" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NOMBRE" VARCHAR2(100 BYTE), 
	"APELLIDO" VARCHAR2(100 BYTE), 
	"CORREO" VARCHAR2(200 BYTE), 
	"TELEFONO" VARCHAR2(20 BYTE), 
	"ID_SUCURSAL" NUMBER, 
	"ACTIVO" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Table PEDIDO
--------------------------------------------------------

  CREATE TABLE "DBADMIN"."PEDIDO" 
   (	"ID_PEDIDO" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ID_CLIENTE" NUMBER, 
	"FECHA_PEDIDO" TIMESTAMP (6), 
	"ESTADO" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Table PRODUCTO
--------------------------------------------------------

  CREATE TABLE "DBADMIN"."PRODUCTO" 
   (	"ID_PRODUCTO" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"DESCRIPCION" VARCHAR2(500 BYTE), 
	"PRECIO" NUMBER(10,2), 
	"STOCK" NUMBER, 
	"ID_CATEGORIA" NUMBER, 
	"ID_SUCURSAL" NUMBER, 
	"ACTIVO" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Table ROL
--------------------------------------------------------

  CREATE TABLE "DBADMIN"."ROL" 
   (	"ID_ROL" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NOMBRE" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Table SUCURSAL
--------------------------------------------------------

  CREATE TABLE "DBADMIN"."SUCURSAL" 
   (	"ID_SUCURSAL" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NOMBRE" VARCHAR2(100 BYTE), 
	"UBICACION" VARCHAR2(200 BYTE), 
	"TELEFONO" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Table USUARIO
--------------------------------------------------------

  CREATE TABLE "DBADMIN"."USUARIO" 
   (	"USERNAME" VARCHAR2(20 BYTE), 
	"PASSWORD" VARCHAR2(512 BYTE), 
	"NOMBRE" VARCHAR2(20 BYTE), 
	"APELLIDO" VARCHAR2(30 BYTE), 
	"CORREO" VARCHAR2(25 BYTE), 
	"TELEFONO" VARCHAR2(15 BYTE), 
	"ACTIVO" NUMBER(1,0), 
	"ID_USUARIO" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ID_ROL" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Table VENTA
--------------------------------------------------------

  CREATE TABLE "DBADMIN"."VENTA" 
   (	"ID_VENTA" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"SUBTOTAL" NUMBER(10,2), 
	"IVA" NUMBER(10,2), 
	"TOTAL" NUMBER(10,2), 
	"ID_CLIENTE" NUMBER, 
	"ID_PRODUCTO" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for View VISTAACCESORIOS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "DBADMIN"."VISTAACCESORIOS" ("ID_ACCESORIO", "NOMBRE", "DESCRIPCION", "PRECIO", "STOCK", "ID_CATEGORIA") AS 
  SELECT ID_ACCESORIO, NOMBRE, DESCRIPCION, PRECIO, STOCK, ID_CATEGORIA
FROM Accesorio
;
--------------------------------------------------------
--  DDL for View VISTACATEGORIAS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "DBADMIN"."VISTACATEGORIAS" ("ID_CATEGORIA", "NOMBRE", "ACTIVO", "DESCRIPCION") AS 
  SELECT ID_CATEGORIA, NOMBRE, ACTIVO, DESCRIPCION
FROM categoria
;
--------------------------------------------------------
--  DDL for View VISTACLIENTES
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "DBADMIN"."VISTACLIENTES" ("ID_CLIENTE", "NOMBRE", "APELLIDO", "TELEFONO", "CORREO", "DIRECCION", "ACTIVO") AS 
  SELECT ID_CLIENTE, NOMBRE, APELLIDO, TELEFONO, CORREO, DIRECCION, ACTIVO
FROM cliente
;
--------------------------------------------------------
--  DDL for View VISTADETALLESDEDIDO
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "DBADMIN"."VISTADETALLESDEDIDO" ("ID_DETALLE", "ID_PEDIDO", "ID_PRODUCTO", "CANTIDAD", "PRECIO", "TOTAL") AS 
  SELECT ID_DETALLE, ID_PEDIDO, ID_PRODUCTO, CANTIDAD, PRECIO, TOTAL
FROM detalle_pedido
;
--------------------------------------------------------
--  DDL for View VISTADEVOLUCIONES
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "DBADMIN"."VISTADEVOLUCIONES" ("ID_DEVOLUCION", "ID_DETALLE", "FECHA_DEVOLUCION", "CANTIDAD", "MOTIVO") AS 
  SELECT ID_DEVOLUCION, ID_DETALLE, FECHA_DEVOLUCION, CANTIDAD, MOTIVO
FROM devolucion
;
--------------------------------------------------------
--  DDL for View VISTAEMPLEADOS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "DBADMIN"."VISTAEMPLEADOS" ("ID_EMPLEADO", "NOMBRE", "APELLIDO", "CORREO", "TELEFONO", "ID_SUCURSAL", "ACTIVO") AS 
  SELECT ID_EMPLEADO, NOMBRE, APELLIDO, CORREO, TELEFONO, ID_SUCURSAL, ACTIVO
FROM EMPLEADO
;
--------------------------------------------------------
--  DDL for View VISTAPEDIDOS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "DBADMIN"."VISTAPEDIDOS" ("ID_PEDIDO", "ID_CLIENTE", "FECHA_PEDIDO", "ESTADO") AS 
  SELECT ID_PEDIDO, ID_CLIENTE, FECHA_PEDIDO, ESTADO
FROM pedido
;
--------------------------------------------------------
--  DDL for View VISTAPRODUCTOS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "DBADMIN"."VISTAPRODUCTOS" ("ID_PRODUCTO", "DESCRIPCION", "PRECIO", "STOCK", "ID_CATEGORIA", "ID_SUCURSAL", "ACTIVO") AS 
  SELECT ID_PRODUCTO, DESCRIPCION, PRECIO, STOCK, ID_CATEGORIA, ID_SUCURSAL, ACTIVO
FROM producto
;
--------------------------------------------------------
--  DDL for View VISTASUCURSALES
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "DBADMIN"."VISTASUCURSALES" ("ID_SUCURSAL", "NOMBRE", "UBICACION", "TELEFONO") AS 
  SELECT ID_SUCURSAL, NOMBRE, UBICACION, TELEFONO
FROM sucursal
;
--------------------------------------------------------
--  DDL for View VISTAUSUARIOS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "DBADMIN"."VISTAUSUARIOS" ("ID_USUARIO", "USERNAME", "PASSWORD", "NOMBRE", "APELLIDO", "CORREO", "TELEFONO", "ACTIVO") AS 
  SELECT ID_USUARIO, USERNAME, PASSWORD, NOMBRE, APELLIDO, CORREO, TELEFONO, ACTIVO
FROM usuario
;
--------------------------------------------------------
--  DDL for View VISTAVENTAS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "DBADMIN"."VISTAVENTAS" ("ID_VENTA", "SUBTOTAL", "IVA", "TOTAL", "ID_CLIENTE", "ID_PRODUCTO") AS 
  SELECT ID_VENTA, SUBTOTAL, IVA, TOTAL, ID_CLIENTE, ID_PRODUCTO
FROM venta
;
REM INSERTING into DBADMIN.ACCESORIO
SET DEFINE OFF;
REM INSERTING into DBADMIN.AUDITORIA_EMPLEADO
SET DEFINE OFF;
Insert into DBADMIN.AUDITORIA_EMPLEADO (ID_AUDITORIA,ID_EMPLEADO,NOMBRE,APELLIDO,CORREO,TELEFONO,ID_SUCURSAL,ACTIVO,OPERACION,FECHA_OPERACION,USUARIO) values ('1','1','JOSUE','CAMPOS1','TWST','8888-8888','22','0','UPDATE',to_timestamp('28/08/24 12:42:13,299000000 AM','DD/MM/RR HH12:MI:SSXFF AM'),'DBADMIN');
REM INSERTING into DBADMIN.AUDITORIA_ROL
SET DEFINE OFF;
REM INSERTING into DBADMIN.AUDITORIA_SUCURSAL
SET DEFINE OFF;
REM INSERTING into DBADMIN.AUDITORIA_USUARIOS
SET DEFINE OFF;
Insert into DBADMIN.AUDITORIA_USUARIOS (ID_AUDITORIA,ID_USUARIO,ACCION,DESCRIPCION,USUARIO_ACCION,FECHA_ACCION,DETALLE_ANTERIOR,DETALLE_NUEVO) values ('1','61','INSERT','INSERT realizado en usuario Empleado','DBADMIN',to_date('28/08/24','DD/MM/RR'),null,'Usuario creado: Empleado');
REM INSERTING into DBADMIN.AUDIT_SESION
SET DEFINE OFF;
Insert into DBADMIN.AUDIT_SESION (ID_AUDIT,USERNAME,OPERATION,TIMESTAMP,SESSION_ID) values ('1','DBADMIN','INICIO DE SESIÓN',to_timestamp('28/08/24 01:32:57,054000000 AM','DD/MM/RR HH12:MI:SSXFF AM'),'610187');
Insert into DBADMIN.AUDIT_SESION (ID_AUDIT,USERNAME,OPERATION,TIMESTAMP,SESSION_ID) values ('2','SYS','INICIO DE SESIÓN',to_timestamp('28/08/24 12:37:38,916000000 AM','DD/MM/RR HH12:MI:SSXFF AM'),'610188');
Insert into DBADMIN.AUDIT_SESION (ID_AUDIT,USERNAME,OPERATION,TIMESTAMP,SESSION_ID) values ('3','SYS','CIERRE DE SESIÓN',to_timestamp('28/08/24 12:37:38,922000000 AM','DD/MM/RR HH12:MI:SSXFF AM'),'4294967295');
Insert into DBADMIN.AUDIT_SESION (ID_AUDIT,USERNAME,OPERATION,TIMESTAMP,SESSION_ID) values ('6','SYS','INICIO DE SESIÓN',to_timestamp('28/08/24 12:38:18,964000000 AM','DD/MM/RR HH12:MI:SSXFF AM'),'610190');
Insert into DBADMIN.AUDIT_SESION (ID_AUDIT,USERNAME,OPERATION,TIMESTAMP,SESSION_ID) values ('7','SYS','CIERRE DE SESIÓN',to_timestamp('28/08/24 12:38:18,983000000 AM','DD/MM/RR HH12:MI:SSXFF AM'),'4294967295');
Insert into DBADMIN.AUDIT_SESION (ID_AUDIT,USERNAME,OPERATION,TIMESTAMP,SESSION_ID) values ('8','DBADMIN','INICIO DE SESIÓN',to_timestamp('28/08/24 01:42:04,584000000 AM','DD/MM/RR HH12:MI:SSXFF AM'),'610191');
Insert into DBADMIN.AUDIT_SESION (ID_AUDIT,USERNAME,OPERATION,TIMESTAMP,SESSION_ID) values ('9','DBADMIN','CIERRE DE SESIÓN',to_timestamp('28/08/24 01:42:37,797000000 AM','DD/MM/RR HH12:MI:SSXFF AM'),'610191');
Insert into DBADMIN.AUDIT_SESION (ID_AUDIT,USERNAME,OPERATION,TIMESTAMP,SESSION_ID) values ('10','DBADMIN','INICIO DE SESIÓN',to_timestamp('28/08/24 01:42:55,486000000 AM','DD/MM/RR HH12:MI:SSXFF AM'),'610192');
Insert into DBADMIN.AUDIT_SESION (ID_AUDIT,USERNAME,OPERATION,TIMESTAMP,SESSION_ID) values ('11','DBADMIN','INICIO DE SESIÓN',to_timestamp('28/08/24 01:43:19,215000000 AM','DD/MM/RR HH12:MI:SSXFF AM'),'610193');
Insert into DBADMIN.AUDIT_SESION (ID_AUDIT,USERNAME,OPERATION,TIMESTAMP,SESSION_ID) values ('12','DBADMIN','CIERRE DE SESIÓN',to_timestamp('28/08/24 01:43:50,004000000 AM','DD/MM/RR HH12:MI:SSXFF AM'),'610193');
Insert into DBADMIN.AUDIT_SESION (ID_AUDIT,USERNAME,OPERATION,TIMESTAMP,SESSION_ID) values ('13','DBADMIN','INICIO DE SESIÓN',to_timestamp('28/08/24 01:43:59,256000000 AM','DD/MM/RR HH12:MI:SSXFF AM'),'610194');
Insert into DBADMIN.AUDIT_SESION (ID_AUDIT,USERNAME,OPERATION,TIMESTAMP,SESSION_ID) values ('14','DBADMIN','CIERRE DE SESIÓN',to_timestamp('28/08/24 01:44:52,806000000 AM','DD/MM/RR HH12:MI:SSXFF AM'),'610194');
Insert into DBADMIN.AUDIT_SESION (ID_AUDIT,USERNAME,OPERATION,TIMESTAMP,SESSION_ID) values ('15','DBADMIN','INICIO DE SESIÓN',to_timestamp('28/08/24 01:45:00,778000000 AM','DD/MM/RR HH12:MI:SSXFF AM'),'610195');
Insert into DBADMIN.AUDIT_SESION (ID_AUDIT,USERNAME,OPERATION,TIMESTAMP,SESSION_ID) values ('16','DBADMIN','INICIO DE SESIÓN',to_timestamp('28/08/24 01:53:31,705000000 AM','DD/MM/RR HH12:MI:SSXFF AM'),'610196');
Insert into DBADMIN.AUDIT_SESION (ID_AUDIT,USERNAME,OPERATION,TIMESTAMP,SESSION_ID) values ('17','DBADMIN','INICIO DE SESIÓN',to_timestamp('28/08/24 01:55:02,792000000 AM','DD/MM/RR HH12:MI:SSXFF AM'),'610197');
Insert into DBADMIN.AUDIT_SESION (ID_AUDIT,USERNAME,OPERATION,TIMESTAMP,SESSION_ID) values ('18','DBADMIN','INICIO DE SESIÓN',to_timestamp('28/08/24 01:56:10,878000000 AM','DD/MM/RR HH12:MI:SSXFF AM'),'610198');
Insert into DBADMIN.AUDIT_SESION (ID_AUDIT,USERNAME,OPERATION,TIMESTAMP,SESSION_ID) values ('4','SYS','INICIO DE SESIÓN',to_timestamp('28/08/24 12:37:48,944000000 AM','DD/MM/RR HH12:MI:SSXFF AM'),'610189');
Insert into DBADMIN.AUDIT_SESION (ID_AUDIT,USERNAME,OPERATION,TIMESTAMP,SESSION_ID) values ('5','SYS','CIERRE DE SESIÓN',to_timestamp('28/08/24 12:37:48,947000000 AM','DD/MM/RR HH12:MI:SSXFF AM'),'4294967295');
REM INSERTING into DBADMIN.CATEGORIA
SET DEFINE OFF;
Insert into DBADMIN.CATEGORIA (ID_CATEGORIA,NOMBRE,ACTIVO,DESCRIPCION) values ('1','Electrónica','1','Todo en dispositivos eléctricos');
REM INSERTING into DBADMIN.CLIENTE
SET DEFINE OFF;
Insert into DBADMIN.CLIENTE (ID_CLIENTE,NOMBRE,APELLIDO,TELEFONO,CORREO,DIRECCION,ACTIVO) values ('21','Josue','Campos','63232495','coder.josue@gmail.com','150M N de repuestos Gigante','0');
REM INSERTING into DBADMIN.DETALLE_PEDIDO
SET DEFINE OFF;
Insert into DBADMIN.DETALLE_PEDIDO (ID_DETALLE,ID_PEDIDO,ID_PRODUCTO,CANTIDAD,PRECIO,TOTAL) values ('26','13','2','1','35000,36','35000,36');
Insert into DBADMIN.DETALLE_PEDIDO (ID_DETALLE,ID_PEDIDO,ID_PRODUCTO,CANTIDAD,PRECIO,TOTAL) values ('27','13','2','1','35000,36','35000,36');
Insert into DBADMIN.DETALLE_PEDIDO (ID_DETALLE,ID_PEDIDO,ID_PRODUCTO,CANTIDAD,PRECIO,TOTAL) values ('28','13','2','1','35000,36','35000,36');
Insert into DBADMIN.DETALLE_PEDIDO (ID_DETALLE,ID_PEDIDO,ID_PRODUCTO,CANTIDAD,PRECIO,TOTAL) values ('29','13','2','1','35000,36','35000,36');
Insert into DBADMIN.DETALLE_PEDIDO (ID_DETALLE,ID_PEDIDO,ID_PRODUCTO,CANTIDAD,PRECIO,TOTAL) values ('30','13','2','1','35000,36','35000,36');
Insert into DBADMIN.DETALLE_PEDIDO (ID_DETALLE,ID_PEDIDO,ID_PRODUCTO,CANTIDAD,PRECIO,TOTAL) values ('31','13','2','1','35000,36','35000,36');
Insert into DBADMIN.DETALLE_PEDIDO (ID_DETALLE,ID_PEDIDO,ID_PRODUCTO,CANTIDAD,PRECIO,TOTAL) values ('32','13','2','1','35000,36','35000,36');
Insert into DBADMIN.DETALLE_PEDIDO (ID_DETALLE,ID_PEDIDO,ID_PRODUCTO,CANTIDAD,PRECIO,TOTAL) values ('33','13','2','1','35000,36','35000,36');
Insert into DBADMIN.DETALLE_PEDIDO (ID_DETALLE,ID_PEDIDO,ID_PRODUCTO,CANTIDAD,PRECIO,TOTAL) values ('34','13','2','1','35000,36','35000,36');
Insert into DBADMIN.DETALLE_PEDIDO (ID_DETALLE,ID_PEDIDO,ID_PRODUCTO,CANTIDAD,PRECIO,TOTAL) values ('35','13','2','1','35000,36','35000,36');
Insert into DBADMIN.DETALLE_PEDIDO (ID_DETALLE,ID_PEDIDO,ID_PRODUCTO,CANTIDAD,PRECIO,TOTAL) values ('36','13','2','1','35000,36','35000,36');
Insert into DBADMIN.DETALLE_PEDIDO (ID_DETALLE,ID_PEDIDO,ID_PRODUCTO,CANTIDAD,PRECIO,TOTAL) values ('37','13','2','1','35000,36','35000,36');
Insert into DBADMIN.DETALLE_PEDIDO (ID_DETALLE,ID_PEDIDO,ID_PRODUCTO,CANTIDAD,PRECIO,TOTAL) values ('38','13','2','1','35000,36','35000,36');
Insert into DBADMIN.DETALLE_PEDIDO (ID_DETALLE,ID_PEDIDO,ID_PRODUCTO,CANTIDAD,PRECIO,TOTAL) values ('39','13','2','1','35000,36','35000,36');
Insert into DBADMIN.DETALLE_PEDIDO (ID_DETALLE,ID_PEDIDO,ID_PRODUCTO,CANTIDAD,PRECIO,TOTAL) values ('1','6','2','1','35000,36','35000,36');
Insert into DBADMIN.DETALLE_PEDIDO (ID_DETALLE,ID_PEDIDO,ID_PRODUCTO,CANTIDAD,PRECIO,TOTAL) values ('2','7','2','1','35000,36','35000,36');
Insert into DBADMIN.DETALLE_PEDIDO (ID_DETALLE,ID_PEDIDO,ID_PRODUCTO,CANTIDAD,PRECIO,TOTAL) values ('3','7','2','3','35000,36','105001,08');
Insert into DBADMIN.DETALLE_PEDIDO (ID_DETALLE,ID_PEDIDO,ID_PRODUCTO,CANTIDAD,PRECIO,TOTAL) values ('4','7','2','1','35000,36','35000,36');
Insert into DBADMIN.DETALLE_PEDIDO (ID_DETALLE,ID_PEDIDO,ID_PRODUCTO,CANTIDAD,PRECIO,TOTAL) values ('41','14','21','1','150','150');
Insert into DBADMIN.DETALLE_PEDIDO (ID_DETALLE,ID_PEDIDO,ID_PRODUCTO,CANTIDAD,PRECIO,TOTAL) values ('42','14','2','1','35000,36','35000,36');
Insert into DBADMIN.DETALLE_PEDIDO (ID_DETALLE,ID_PEDIDO,ID_PRODUCTO,CANTIDAD,PRECIO,TOTAL) values ('21','8','2','4','35000,36','140001,44');
Insert into DBADMIN.DETALLE_PEDIDO (ID_DETALLE,ID_PEDIDO,ID_PRODUCTO,CANTIDAD,PRECIO,TOTAL) values ('22','9','2','1','35000,36','35000,36');
Insert into DBADMIN.DETALLE_PEDIDO (ID_DETALLE,ID_PEDIDO,ID_PRODUCTO,CANTIDAD,PRECIO,TOTAL) values ('23','10','2','1','35000,36','35000,36');
Insert into DBADMIN.DETALLE_PEDIDO (ID_DETALLE,ID_PEDIDO,ID_PRODUCTO,CANTIDAD,PRECIO,TOTAL) values ('24','11','2','1','35000,36','35000,36');
Insert into DBADMIN.DETALLE_PEDIDO (ID_DETALLE,ID_PEDIDO,ID_PRODUCTO,CANTIDAD,PRECIO,TOTAL) values ('25','12','2','1','35000,36','35000,36');
REM INSERTING into DBADMIN.DEVOLUCION
SET DEFINE OFF;
Insert into DBADMIN.DEVOLUCION (ID_DEVOLUCION,ID_DETALLE,FECHA_DEVOLUCION,CANTIDAD,MOTIVO) values ('2','21',to_date('24/08/24','DD/MM/RR'),'3','test');
REM INSERTING into DBADMIN.EMPLEADO
SET DEFINE OFF;
Insert into DBADMIN.EMPLEADO (ID_EMPLEADO,NOMBRE,APELLIDO,CORREO,TELEFONO,ID_SUCURSAL,ACTIVO) values ('1','JOSUE','CAMPOS1','TWST','8888-8888','22','0');
REM INSERTING into DBADMIN.PEDIDO
SET DEFINE OFF;
Insert into DBADMIN.PEDIDO (ID_PEDIDO,ID_CLIENTE,FECHA_PEDIDO,ESTADO) values ('8','21',to_timestamp('22/08/24 03:41:41,000000000 PM','DD/MM/RR HH12:MI:SSXFF AM'),'1');
Insert into DBADMIN.PEDIDO (ID_PEDIDO,ID_CLIENTE,FECHA_PEDIDO,ESTADO) values ('9','21',to_timestamp('22/08/24 03:44:31,000000000 PM','DD/MM/RR HH12:MI:SSXFF AM'),'1');
Insert into DBADMIN.PEDIDO (ID_PEDIDO,ID_CLIENTE,FECHA_PEDIDO,ESTADO) values ('10','21',to_timestamp('22/08/24 03:49:45,000000000 PM','DD/MM/RR HH12:MI:SSXFF AM'),'1');
Insert into DBADMIN.PEDIDO (ID_PEDIDO,ID_CLIENTE,FECHA_PEDIDO,ESTADO) values ('11','21',to_timestamp('22/08/24 03:50:53,000000000 PM','DD/MM/RR HH12:MI:SSXFF AM'),'1');
Insert into DBADMIN.PEDIDO (ID_PEDIDO,ID_CLIENTE,FECHA_PEDIDO,ESTADO) values ('12','21',to_timestamp('22/08/24 03:52:30,000000000 PM','DD/MM/RR HH12:MI:SSXFF AM'),'1');
Insert into DBADMIN.PEDIDO (ID_PEDIDO,ID_CLIENTE,FECHA_PEDIDO,ESTADO) values ('13','21',to_timestamp('22/08/24 05:53:00,000000000 PM','DD/MM/RR HH12:MI:SSXFF AM'),'1');
Insert into DBADMIN.PEDIDO (ID_PEDIDO,ID_CLIENTE,FECHA_PEDIDO,ESTADO) values ('14','21',to_timestamp('22/08/24 06:35:21,000000000 PM','DD/MM/RR HH12:MI:SSXFF AM'),'1');
Insert into DBADMIN.PEDIDO (ID_PEDIDO,ID_CLIENTE,FECHA_PEDIDO,ESTADO) values ('1','21',to_timestamp('19/08/24 11:00:21,000000000 PM','DD/MM/RR HH12:MI:SSXFF AM'),'1');
Insert into DBADMIN.PEDIDO (ID_PEDIDO,ID_CLIENTE,FECHA_PEDIDO,ESTADO) values ('2','21',to_timestamp('19/08/24 11:00:32,000000000 PM','DD/MM/RR HH12:MI:SSXFF AM'),'1');
Insert into DBADMIN.PEDIDO (ID_PEDIDO,ID_CLIENTE,FECHA_PEDIDO,ESTADO) values ('3','21',to_timestamp('19/08/24 11:02:07,000000000 PM','DD/MM/RR HH12:MI:SSXFF AM'),'1');
Insert into DBADMIN.PEDIDO (ID_PEDIDO,ID_CLIENTE,FECHA_PEDIDO,ESTADO) values ('4','21',to_timestamp('19/08/24 11:02:45,000000000 PM','DD/MM/RR HH12:MI:SSXFF AM'),'1');
Insert into DBADMIN.PEDIDO (ID_PEDIDO,ID_CLIENTE,FECHA_PEDIDO,ESTADO) values ('5','21',to_timestamp('19/08/24 11:04:47,000000000 PM','DD/MM/RR HH12:MI:SSXFF AM'),'1');
Insert into DBADMIN.PEDIDO (ID_PEDIDO,ID_CLIENTE,FECHA_PEDIDO,ESTADO) values ('6','21',to_timestamp('19/08/24 11:08:46,000000000 PM','DD/MM/RR HH12:MI:SSXFF AM'),'1');
Insert into DBADMIN.PEDIDO (ID_PEDIDO,ID_CLIENTE,FECHA_PEDIDO,ESTADO) values ('7','21',to_timestamp('19/08/24 11:10:46,000000000 PM','DD/MM/RR HH12:MI:SSXFF AM'),'1');
REM INSERTING into DBADMIN.PRODUCTO
SET DEFINE OFF;
Insert into DBADMIN.PRODUCTO (ID_PRODUCTO,DESCRIPCION,PRECIO,STOCK,ID_CATEGORIA,ID_SUCURSAL,ACTIVO) values ('21','Bombillo','150','51','1','22','1');
Insert into DBADMIN.PRODUCTO (ID_PRODUCTO,DESCRIPCION,PRECIO,STOCK,ID_CATEGORIA,ID_SUCURSAL,ACTIVO) values ('2','Cable corriente 240V','35000,36','15','1','22','1');
REM INSERTING into DBADMIN.ROL
SET DEFINE OFF;
Insert into DBADMIN.ROL (ID_ROL,NOMBRE) values ('1','cliente');
Insert into DBADMIN.ROL (ID_ROL,NOMBRE) values ('2','empleado');
Insert into DBADMIN.ROL (ID_ROL,NOMBRE) values ('3','admin');
REM INSERTING into DBADMIN.SUCURSAL
SET DEFINE OFF;
Insert into DBADMIN.SUCURSAL (ID_SUCURSAL,NOMBRE,UBICACION,TELEFONO) values ('22','CRE','Alajuela','8888-8888');
REM INSERTING into DBADMIN.USUARIO
SET DEFINE OFF;
Insert into DBADMIN.USUARIO (USERNAME,PASSWORD,NOMBRE,APELLIDO,CORREO,TELEFONO,ACTIVO,ID_USUARIO,ID_ROL) values ('Empleado','Password','Empleado','NA','test@gmail.com','8888-8888','1','61','2');
Insert into DBADMIN.USUARIO (USERNAME,PASSWORD,NOMBRE,APELLIDO,CORREO,TELEFONO,ACTIVO,ID_USUARIO,ID_ROL) values ('Cliente','Password','Juan','Pérez','juan.perez@example.com','5551-234','1','1','1');
Insert into DBADMIN.USUARIO (USERNAME,PASSWORD,NOMBRE,APELLIDO,CORREO,TELEFONO,ACTIVO,ID_USUARIO,ID_ROL) values ('Admin','Password','Pedro','García','pedro.garcia@example.com','555-8765','1','3','3');
REM INSERTING into DBADMIN.VENTA
SET DEFINE OFF;
--------------------------------------------------------
--  DDL for Index PK_CATEGORIA
--------------------------------------------------------

  CREATE UNIQUE INDEX "DBADMIN"."PK_CATEGORIA" ON "DBADMIN"."CATEGORIA" ("ID_CATEGORIA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Index PK_CLIENTE
--------------------------------------------------------

  CREATE UNIQUE INDEX "DBADMIN"."PK_CLIENTE" ON "DBADMIN"."CLIENTE" ("ID_CLIENTE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Index PK_DETALLE_PEDIDO
--------------------------------------------------------

  CREATE UNIQUE INDEX "DBADMIN"."PK_DETALLE_PEDIDO" ON "DBADMIN"."DETALLE_PEDIDO" ("ID_DETALLE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Index PK_DEVOLUCION
--------------------------------------------------------

  CREATE UNIQUE INDEX "DBADMIN"."PK_DEVOLUCION" ON "DBADMIN"."DEVOLUCION" ("ID_DEVOLUCION") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Index PK_EMPLEADO
--------------------------------------------------------

  CREATE UNIQUE INDEX "DBADMIN"."PK_EMPLEADO" ON "DBADMIN"."EMPLEADO" ("ID_EMPLEADO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Index PK_PEDIDO
--------------------------------------------------------

  CREATE UNIQUE INDEX "DBADMIN"."PK_PEDIDO" ON "DBADMIN"."PEDIDO" ("ID_PEDIDO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Index PK_PRODUCTO
--------------------------------------------------------

  CREATE UNIQUE INDEX "DBADMIN"."PK_PRODUCTO" ON "DBADMIN"."PRODUCTO" ("ID_PRODUCTO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Index PK_ROL
--------------------------------------------------------

  CREATE UNIQUE INDEX "DBADMIN"."PK_ROL" ON "DBADMIN"."ROL" ("ID_ROL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Index PK_SUCURSAL
--------------------------------------------------------

  CREATE UNIQUE INDEX "DBADMIN"."PK_SUCURSAL" ON "DBADMIN"."SUCURSAL" ("ID_SUCURSAL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Index PK_USUARIO
--------------------------------------------------------

  CREATE UNIQUE INDEX "DBADMIN"."PK_USUARIO" ON "DBADMIN"."USUARIO" ("ID_USUARIO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Index PK_VENTA
--------------------------------------------------------

  CREATE UNIQUE INDEX "DBADMIN"."PK_VENTA" ON "DBADMIN"."VENTA" ("ID_VENTA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "LenguajeDB" ;
--------------------------------------------------------
--  DDL for Trigger TRG_AUDIT_LOGOFF
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "DBADMIN"."TRG_AUDIT_LOGOFF" 
BEFORE LOGOFF ON DATABASE
DECLARE
    v_username VARCHAR2(100);
BEGIN

    SELECT USER INTO v_username FROM dual;


    INSERT INTO audit_sesion (username, operation, session_id)
    VALUES (v_username, 'CIERRE DE SESIÓN', SYS_CONTEXT('USERENV', 'SESSIONID'));
END;
/
ALTER TRIGGER "DBADMIN"."TRG_AUDIT_LOGOFF" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_AUDIT_LOGON
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "DBADMIN"."TRG_AUDIT_LOGON" 
AFTER LOGON ON DATABASE
DECLARE
    v_username VARCHAR2(100);
BEGIN

    SELECT USER INTO v_username FROM dual;


    INSERT INTO audit_sesion (username, operation, session_id)
    VALUES (v_username, 'INICIO DE SESIÓN', SYS_CONTEXT('USERENV', 'SESSIONID'));
END;
/
ALTER TRIGGER "DBADMIN"."TRG_AUDIT_LOGON" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_AUDITORIA_EMPLEADO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "DBADMIN"."TRG_AUDITORIA_EMPLEADO" 
AFTER INSERT OR UPDATE OR DELETE ON "DBADMIN"."EMPLEADO"
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO "DBADMIN"."AUDITORIA_EMPLEADO" (
            "ID_EMPLEADO", "NOMBRE", "APELLIDO", "CORREO", "TELEFONO", 
            "ID_SUCURSAL", "ACTIVO", "OPERACION", 
            "FECHA_OPERACION", "USUARIO"
        ) VALUES (
            :NEW."ID_EMPLEADO", :NEW."NOMBRE", :NEW."APELLIDO", 
            :NEW."CORREO", :NEW."TELEFONO", :NEW."ID_SUCURSAL", 
            :NEW."ACTIVO", 'INSERT', 
            SYSTIMESTAMP, USER
        );
    ELSIF UPDATING THEN
        INSERT INTO "DBADMIN"."AUDITORIA_EMPLEADO" (
            "ID_EMPLEADO", "NOMBRE", "APELLIDO", "CORREO", "TELEFONO", 
            "ID_SUCURSAL", "ACTIVO", "OPERACION", 
            "FECHA_OPERACION", "USUARIO"
        ) VALUES (
            :NEW."ID_EMPLEADO", :NEW."NOMBRE", :NEW."APELLIDO", 
            :NEW."CORREO", :NEW."TELEFONO", :NEW."ID_SUCURSAL", 
            :NEW."ACTIVO", 'UPDATE', 
            SYSTIMESTAMP, USER
        );
    ELSIF DELETING THEN
        INSERT INTO "DBADMIN"."AUDITORIA_EMPLEADO" (
            "ID_EMPLEADO", "NOMBRE", "APELLIDO", "CORREO", "TELEFONO", 
            "ID_SUCURSAL", "ACTIVO", "OPERACION", 
            "FECHA_OPERACION", "USUARIO"
        ) VALUES (
            :OLD."ID_EMPLEADO", :OLD."NOMBRE", :OLD."APELLIDO", 
            :OLD."CORREO", :OLD."TELEFONO", :OLD."ID_SUCURSAL", 
            :OLD."ACTIVO", 'DELETE', 
            SYSTIMESTAMP, USER
        );
    END IF;
END;

/
ALTER TRIGGER "DBADMIN"."TRG_AUDITORIA_EMPLEADO" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_AUDITORIA_ROL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "DBADMIN"."TRG_AUDITORIA_ROL" 
AFTER INSERT OR UPDATE OR DELETE ON "DBADMIN"."ROL"
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO "DBADMIN"."AUDITORIA_ROL" (
            "ID_ROL", "NOMBRE", "OPERACION", "FECHA_OPERACION", "USUARIO"
        ) VALUES (
            :NEW."ID_ROL", :NEW."NOMBRE", 'INSERT', SYSTIMESTAMP, USER
        );
    ELSIF UPDATING THEN
        INSERT INTO "DBADMIN"."AUDITORIA_ROL" (
            "ID_ROL", "NOMBRE", "OPERACION", "FECHA_OPERACION", "USUARIO"
        ) VALUES (
            :NEW."ID_ROL", :NEW."NOMBRE", 'UPDATE', SYSTIMESTAMP, USER
        );
    ELSIF DELETING THEN
        INSERT INTO "DBADMIN"."AUDITORIA_ROL" (
            "ID_ROL", "NOMBRE", "OPERACION", "FECHA_OPERACION", "USUARIO"
        ) VALUES (
            :OLD."ID_ROL", :OLD."NOMBRE", 'DELETE', SYSTIMESTAMP, USER
        );
    END IF;
END;

/
ALTER TRIGGER "DBADMIN"."TRG_AUDITORIA_ROL" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_AUDITORIA_SUCURSAL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "DBADMIN"."TRG_AUDITORIA_SUCURSAL" 
AFTER INSERT OR UPDATE OR DELETE ON "DBADMIN"."SUCURSAL"
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO "DBADMIN"."AUDITORIA_SUCURSAL" (
            "ID_SUCURSAL", "NOMBRE", "UBICACION", "TELEFONO", 
            "OPERACION", "FECHA_OPERACION", "USUARIO"
        ) VALUES (
            :NEW."ID_SUCURSAL", :NEW."NOMBRE", :NEW."UBICACION", 
            :NEW."TELEFONO", 'INSERT', 
            SYSTIMESTAMP, USER
        );
    ELSIF UPDATING THEN
        INSERT INTO "DBADMIN"."AUDITORIA_SUCURSAL" (
            "ID_SUCURSAL", "NOMBRE", "UBICACION", "TELEFONO", 
            "OPERACION", "FECHA_OPERACION", "USUARIO"
        ) VALUES (
            :NEW."ID_SUCURSAL", :NEW."NOMBRE", :NEW."UBICACION", 
            :NEW."TELEFONO", 'UPDATE', 
            SYSTIMESTAMP, USER
        );
    ELSIF DELETING THEN
        INSERT INTO "DBADMIN"."AUDITORIA_SUCURSAL" (
            "ID_SUCURSAL", "NOMBRE", "UBICACION", "TELEFONO", 
            "OPERACION", "FECHA_OPERACION", "USUARIO"
        ) VALUES (
            :OLD."ID_SUCURSAL", :OLD."NOMBRE", :OLD."UBICACION", 
            :OLD."TELEFONO", 'DELETE', 
            SYSTIMESTAMP, USER
        );
    END IF;
END;
--------------------------------------------------------
--  trigger  for Table inicio sesion
--------------------------------------------------------

/
ALTER TRIGGER "DBADMIN"."TRG_AUDITORIA_SUCURSAL" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_AUDITORIA_USUARIOS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "DBADMIN"."TRG_AUDITORIA_USUARIOS" 
AFTER INSERT OR UPDATE OR DELETE ON "DBADMIN"."USUARIO"
FOR EACH ROW
DECLARE
    v_accion VARCHAR2(50);
    v_detalle_anterior VARCHAR2(255);
    v_detalle_nuevo VARCHAR2(255);
BEGIN

    IF INSERTING THEN
        v_accion := 'INSERT';
        v_detalle_nuevo := 'Usuario creado: ' || :NEW.username;
    ELSIF UPDATING THEN
        v_accion := 'UPDATE';
        v_detalle_anterior := 'Usuario anterior: ' || :OLD.username;
        v_detalle_nuevo := 'Usuario actualizado: ' || :NEW.username;
    ELSIF DELETING THEN
        v_accion := 'DELETE';
        v_detalle_anterior := 'Usuario eliminado: ' || :OLD.username;
    END IF;


    INSERT INTO auditoria_usuarios (
        id_usuario,
        accion,
        descripcion,
        usuario_accion,
        fecha_accion,
        detalle_anterior,
        detalle_nuevo
    ) VALUES (
        NVL(:NEW.id_usuario, :OLD.id_usuario),  
        v_accion,
        v_accion || ' realizado en usuario ' || NVL(:NEW.username, :OLD.username),
        USER, 
        SYSDATE,
        v_detalle_anterior,
        v_detalle_nuevo
    );
END;

/
ALTER TRIGGER "DBADMIN"."TRG_AUDITORIA_USUARIOS" ENABLE;
--------------------------------------------------------
--  DDL for Procedure CONSULTARCATEGORIA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."CONSULTARCATEGORIA" (
    p_resultado OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_resultado FOR SELECT
                             nombre,
                             activo,
                             descripcion
                         FROM
                                 categoria;

END consultarCategoria;


/
--------------------------------------------------------
--  DDL for Procedure CONSULTARCLIENTES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."CONSULTARCLIENTES" (
    p_resultado OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_resultado FOR 
    SELECT 
        ID_CLIENTE,
        NOMBRE,
        APELLIDO,
        TELEFONO,
        CORREO,
        DIRECCION,
        ACTIVO
    FROM cliente;
END;

/
--------------------------------------------------------
--  DDL for Procedure CONSULTARDETALLEPEDIDO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."CONSULTARDETALLEPEDIDO" (
    p_resultado OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_resultado FOR
    SELECT
        d.Id_detalle,
        d.Id_pedido,
        p.descripcion AS nombre_producto,
        d.cantidad,
        d.precio,
        d.total
    FROM
        Detalle_pedido d
    JOIN
        producto p ON d.Id_producto = p.id_producto;
END consultarDetallePedido;


/
--------------------------------------------------------
--  DDL for Procedure CONSULTARPEDIDOS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."CONSULTARPEDIDOS" (
    p_resultado OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_resultado FOR
    SELECT
        Id_pedido,
        Id_cliente,
        fecha_pedido,
        estado
    FROM
        pedido;
END consultarPedidos;


/
--------------------------------------------------------
--  DDL for Procedure CONSULTARPRODUCTOS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."CONSULTARPRODUCTOS" (
    p_resultado OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_resultado FOR
    SELECT
        Id_producto,
        Descripcion,
        Precio,
        Stock,
        Id_categoria,
        Id_sucursal,
        activo
    FROM
        producto;
END consultarProductos;


/
--------------------------------------------------------
--  DDL for Procedure CONSULTARSUCURSAL
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."CONSULTARSUCURSAL" (
    p_resultado OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_resultado FOR
    SELECT
        Id_sucursal,
        Nombre,
        ubicacion,
        telefono
    FROM
        sucursal;
END consultarSucursal;


/
--------------------------------------------------------
--  DDL for Procedure CONSULTARUSUARIOPORUSERNAME
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."CONSULTARUSUARIOPORUSERNAME" (
    p_username IN VARCHAR2,
    p_password IN VARCHAR2,
    p_resultado OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN p_resultado FOR
    SELECT
        username,
        password,
        nombre,
        apellido,
        correo,
        telefono,
        activo,
        id_rol,
        id_usuario
    FROM
        usuario
    WHERE
        Username = p_username and password=p_password;
END;


/
--------------------------------------------------------
--  DDL for Procedure CONSULTARUSUARIOS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."CONSULTARUSUARIOS" (
    p_resultado OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_resultado FOR SELECT
                             Username,
                             nombre,
                             apellido,
                             activo
                         FROM
                             usuario;

END;


/
--------------------------------------------------------
--  DDL for Procedure CONSULTARVENTA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."CONSULTARVENTA" (
    p_resultado OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_resultado FOR
    SELECT
        Id_venta,
        subtotal,
        iva,
        total,
        id_cliente,
        id_producto
    FROM
        venta;
END consultarVenta;


/
--------------------------------------------------------
--  DDL for Procedure DESACTIVARUSUARIO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."DESACTIVARUSUARIO" (
    p_id_usuario   IN usuario.id_usuario%TYPE
) AS
BEGIN
    UPDATE usuario
    SET 
        activo = 0   -- Set activo column to 0 (deactivate user)
    WHERE id_usuario = p_id_usuario;

    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20001, 'Usuario no encontrado.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20002, 'Error al desactivar usuario: ' || SQLERRM);
END;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINARACCESORIO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."ELIMINARACCESORIO" (
    p_id_accesorio IN NUMBER
) AS
BEGIN
    DELETE FROM accesorio
    WHERE id_accesorio = p_id_accesorio;

    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINARCATEGORIA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."ELIMINARCATEGORIA" (
    p_id_categoria IN NUMBER
) AS
BEGIN
    DELETE FROM categoria
    WHERE id_categoria = p_id_categoria;

    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINARCLIENTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."ELIMINARCLIENTE" (
    p_id_cliente IN NUMBER
) AS
BEGIN
    DELETE FROM cliente
    WHERE ID_CLIENTE = p_id_cliente;

    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure ELIMINARDETALLEPEDIDO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."ELIMINARDETALLEPEDIDO" (
    p_id_detalle IN NUMBER
) AS
BEGIN
    DELETE FROM detalle_pedido
    WHERE id_detalle = p_id_detalle;

    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINARDEVOLUCION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."ELIMINARDEVOLUCION" (
    p_id_devolucion IN NUMBER
)
IS
BEGIN
    DELETE FROM DBADMIN.DEVOLUCION
    WHERE ID_DEVOLUCION = p_id_devolucion;

    IF SQL%ROWCOUNT = 0 THEN
        DBMS_OUTPUT.PUT_LINE('No se encontró una devolución con ID_DEVOLUCION = ' || p_id_devolucion);
    ELSE
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Devolución eliminada exitosamente.');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error al eliminar la devolución: ' || SQLERRM);
END ELIMINARDEVOLUCION;

/
--------------------------------------------------------
--  DDL for Procedure ELIMINAREMPLEADO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."ELIMINAREMPLEADO" (
    p_id_empleado IN EMPLEADO.ID_EMPLEADO%TYPE
)
IS
BEGIN
    DELETE FROM EMPLEADO
    WHERE ID_EMPLEADO = p_id_empleado;

    COMMIT; -- Ensure changes are committed
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK; -- Roll back in case of error
        RAISE;    -- Re-raise exception to be handled externally
END;

/
--------------------------------------------------------
--  DDL for Procedure ELIMINARPEDIDOS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."ELIMINARPEDIDOS" (
    p_id_pedido IN NUMBER
) AS
BEGIN
    DELETE FROM pedido
    WHERE id_pedido = p_id_pedido;

    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINARPRODUCTO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."ELIMINARPRODUCTO" (
    p_id_producto IN NUMBER
) AS
BEGIN
    DELETE FROM producto
    WHERE id_producto = p_id_producto;

    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINARROL
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."ELIMINARROL" (
    p_id_rol IN NUMBER
) AS
BEGIN
    DELETE FROM rol
    WHERE id_rol = p_id_rol;

    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINARSUCURSAL
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."ELIMINARSUCURSAL" (
    p_id_sucursal IN NUMBER
) AS
BEGIN
    DELETE FROM sucursal
    WHERE id_sucursal = p_id_sucursal;

    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINARUSUARIO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."ELIMINARUSUARIO" (
    p_id_usuario IN NUMBER
) AS
BEGIN
    DELETE FROM usuario
    WHERE id_usuario = p_id_usuario;

    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINARVENTA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."ELIMINARVENTA" (
    p_id_venta IN NUMBER
) AS
BEGIN
    DELETE FROM venta
    WHERE id_venta = p_id_venta;

    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure FILTRARCLIENTES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."FILTRARCLIENTES" (
    p_id_cliente IN NUMBER,
    p_nombre IN VARCHAR2,
    p_apellido IN VARCHAR2,
    p_telefono IN VARCHAR2,
    p_correo IN VARCHAR2,
    p_resultado OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_resultado FOR
    SELECT
        ID_CLIENTE,
        UPPER(NOMBRE) as NOMBRE,
        UPPER(APELLIDO) as APELLIDO,
        TELEFONO,
        CORREO,
        UPPER(DIRECCION) as DIRECCION,
        ACTIVO
    FROM
        CLIENTE
    WHERE
        (p_id_cliente IS NULL OR ID_CLIENTE = p_id_cliente)
        AND (p_nombre IS NULL OR UPPER(NOMBRE || ' ' || APELLIDO) LIKE '%' || UPPER(p_nombre) || '%')
        AND (p_apellido IS NULL OR UPPER(APELLIDO) LIKE '%' || UPPER(p_apellido) || '%')
        AND (p_telefono IS NULL OR TELEFONO LIKE '%' || p_telefono || '%')
        AND (p_correo IS NULL OR CORREO LIKE '%' || p_correo || '%');
END;

/
--------------------------------------------------------
--  DDL for Procedure FILTRARDETALLEPEDIDO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."FILTRARDETALLEPEDIDO" (
    p_id_pedido IN NUMBER,
    p_resultado OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_resultado FOR
    SELECT 
        d.ID_DETALLE "ID",
        p.DESCRIPCION "Descripcion",
        d.CANTIDAD "Cantidad",
        d.PRECIO "Precio",
        d.TOTAL "Total"
    FROM 
        DETALLE_PEDIDO d
    JOIN PRODUCTO p on p.ID_PRODUCTO= d.id_producto
    WHERE 
        ID_PEDIDO = p_id_pedido;
END;

/
--------------------------------------------------------
--  DDL for Procedure FILTRARPEDIDOS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."FILTRARPEDIDOS" (
    p_id_pedido IN NUMBER,
    p_id_cliente IN VARCHAR2,
    p_resultado OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_resultado FOR
    SELECT 
    PEDIDO.ID_PEDIDO "Id del pedido", 
    CLIENTE.NOMBRE || ' ' || CLIENTE.APELLIDO AS "Nombre del cliente", 
    TO_CHAR(PEDIDO.FECHA_PEDIDO, 'DD/MM/YYYY') AS Fecha, 
    CASE 
        WHEN PEDIDO.ESTADO = 1 THEN 'Entregado'
        WHEN PEDIDO.ESTADO = 2 THEN 'Pendiente'
        WHEN PEDIDO.ESTADO = 3 THEN 'Cancelado'
        ELSE 'Desconocido'
    END AS Estado
FROM 
    PEDIDO 
JOIN 
    CLIENTE ON CLIENTE.ID_CLIENTE = PEDIDO.ID_CLIENTE
    WHERE
        (p_id_pedido IS NULL OR ID_PEDIDO = p_id_pedido)
        AND (p_id_cliente IS NULL OR UPPER(CLIENTE.NOMBRE || ' ' || CLIENTE.APELLIDO) LIKE '%' || UPPER(p_id_cliente) || '%');
END;

/
--------------------------------------------------------
--  DDL for Procedure FILTRARPRODUCTOS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."FILTRARPRODUCTOS" (
    p_id_producto   IN  PRODUCTO.ID_PRODUCTO%TYPE,
    p_descripcion   IN  PRODUCTO.DESCRIPCION%TYPE,
    cur_resultado   OUT SYS_REFCURSOR
) 
AS
BEGIN
    OPEN cur_resultado FOR
    SELECT ID_PRODUCTO, DESCRIPCION, PRECIO, STOCK, ID_CATEGORIA, ID_SUCURSAL, ACTIVO
    FROM PRODUCTO
    WHERE ACTIVO = 1
    AND (ID_PRODUCTO = p_id_producto OR p_id_producto IS NULL)
    AND (UPPER(DESCRIPCION) LIKE '%' || UPPER(p_descripcion) || '%' OR p_descripcion IS NULL);
END;

/
--------------------------------------------------------
--  DDL for Procedure FILTRARUSUARIOSPORNOMBRE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."FILTRARUSUARIOSPORNOMBRE" (
    p_nombre IN VARCHAR2 DEFAULT NULL, -- Parámetro de entrada opcional
    p_resultado OUT SYS_REFCURSOR    -- Parámetro de salida como cursor
)
AS
BEGIN
    OPEN p_resultado FOR
    SELECT 
        USERNAME,
        PASSWORD,
        NOMBRE,
        APELLIDO,
        CORREO,
        TELEFONO,
        ACTIVO,
        ID_USUARIO,
        ID_ROL
    FROM USUARIO
    WHERE (p_nombre IS NULL OR USERNAME LIKE '%' || p_nombre || '%');
    -- Si p_nombre es NULL, se seleccionan todos los registros
    -- Si p_nombre tiene un valor, se filtran los registros que contengan ese valor en el campo NOMBRE
END;

/
--------------------------------------------------------
--  DDL for Procedure MODIFICARCATEGORIA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."MODIFICARCATEGORIA" (
    p_id_categoria   IN NUMBER,
    p_nombre IN VARCHAR2,
    p_activo IN NUMBER,
    p_descripcion    IN VARCHAR2
) AS
BEGIN
    UPDATE categoria
    SET 
        nombre = p_nombre,
        activo = p_activo,
        descripcion = p_descripcion
    WHERE id_categoria = p_id_categoria;

    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure MODIFICARCLIENTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."MODIFICARCLIENTE" (
    p_id_cliente   IN NUMBER,
    p_nombre       IN VARCHAR2,
    p_apellido     IN VARCHAR2,
    p_telefono     IN VARCHAR2,
    p_correo       IN VARCHAR2,
    p_direccion    IN VARCHAR2,
    p_activo       IN NUMBER
) AS
BEGIN
    UPDATE cliente
    SET 
        NOMBRE = p_nombre,
        APELLIDO = p_apellido,
        TELEFONO = p_telefono,
        CORREO = p_correo,
        DIRECCION = p_direccion,
        ACTIVO = p_activo
    WHERE ID_CLIENTE = p_id_cliente;

    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure MODIFICARDETALLEPEDIDO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."MODIFICARDETALLEPEDIDO" (
    p_id_detalle   IN NUMBER,
    p_cantidad IN VARCHAR2,
    p_precio IN NUMBER,
    p_total   IN VARCHAR2
) AS
BEGIN
    UPDATE detalle_pedido
    SET 
        cantidad = p_cantidad,
        precio = p_precio,
        total = p_total
    WHERE id_detalle = p_id_detalle;

    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure MODIFICARDEVOLUCION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."MODIFICARDEVOLUCION" (
    p_id_devolucion    IN NUMBER,
    p_id_detalle       IN NUMBER,
    p_fecha_devolucion IN DATE,
    p_cantidad         IN NUMBER,
    p_motivo           IN VARCHAR2
)
IS
BEGIN
    UPDATE DBADMIN.DEVOLUCION
    SET
        ID_DETALLE = p_id_detalle,
        FECHA_DEVOLUCION = p_fecha_devolucion,
        CANTIDAD = p_cantidad,
        MOTIVO = p_motivo
    WHERE ID_DEVOLUCION = p_id_devolucion;

    IF SQL%ROWCOUNT = 0 THEN
        DBMS_OUTPUT.PUT_LINE('No se encontró una devolución con ID_DEVOLUCION = ' || p_id_devolucion);
    ELSE
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Devolución actualizada exitosamente.');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error al modificar la devolución: ' || SQLERRM);
END MODIFICARDEVOLUCION;

/
--------------------------------------------------------
--  DDL for Procedure MODIFICAREMPLEADO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."MODIFICAREMPLEADO" (
    p_id_empleado   IN EMPLEADO.ID_EMPLEADO%TYPE,
    p_nombre        IN EMPLEADO.NOMBRE%TYPE,
    p_apellido      IN EMPLEADO.APELLIDO%TYPE,
    p_correo        IN EMPLEADO.CORREO%TYPE,
    p_telefono      IN EMPLEADO.TELEFONO%TYPE,
    p_id_sucursal   IN EMPLEADO.ID_SUCURSAL%TYPE,
    p_activo        IN EMPLEADO.ACTIVO%TYPE
)
IS
BEGIN
    UPDATE EMPLEADO
    SET NOMBRE = p_nombre,
        APELLIDO = p_apellido,
        CORREO = p_correo,
        TELEFONO = p_telefono,
        ID_SUCURSAL = p_id_sucursal,
        ACTIVO = p_activo 
    WHERE ID_EMPLEADO = p_id_empleado;

    COMMIT; -- Ensure changes are committed
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK; -- Roll back in case of error
        RAISE;    -- Re-raise exception to be handled externally
END;

/
--------------------------------------------------------
--  DDL for Procedure MODIFICARPEDIDO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."MODIFICARPEDIDO" (
    p_id_pedido   IN NUMBER,
    p_fecha_pedido IN DATE,
    p_estado IN NUMBER
) AS
BEGIN
    UPDATE pedido
    SET  
        fecha_pedido = SYSDATE,
        estado = p_estado
    WHERE id_pedido = p_id_pedido;

    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure MODIFICARPRODUCTO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."MODIFICARPRODUCTO" (
    p_id_producto NUMBER,
    p_descripcion VARCHAR2,
    p_precio NUMBER,
    p_stock NUMBER,
    p_id_categoria NUMBER,
    p_id_sucursal NUMBER,
    p_activo NUMBER
) AS
BEGIN
    UPDATE producto
    SET  
        descripcion = p_descripcion, 
        precio = p_precio ,
        stock = p_stock ,
        activo = p_activo 
        WHERE id_producto = p_id_producto;

    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure MODIFICARSUCURSAL
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."MODIFICARSUCURSAL" (
    p_id_sucursal NUMBER,
    p_nombre VARCHAR2,
    p_ubicacion VARCHAR2,
    p_telefono VARCHAR2
) AS
BEGIN
    UPDATE sucursal
    SET 
        nombre = p_nombre,
        ubicacion = p_ubicacion,
        telefono = p_telefono
        WHERE id_sucursal = p_id_sucursal;

    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure MODIFICARUSUARIO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."MODIFICARUSUARIO" (
    p_id_usuario   IN usuario.id_usuario%TYPE,
    p_username     IN usuario.username%TYPE,
    p_password     IN usuario.password%TYPE,
    p_nombre       IN usuario.nombre%TYPE,
    p_apellido     IN usuario.apellido%TYPE,
    p_correo       IN usuario.correo%TYPE,
    p_telefono     IN usuario.telefono%TYPE,
    p_activo       IN usuario.activo%TYPE,
    p_id_rol       IN usuario.id_rol%TYPE
) AS
BEGIN
    UPDATE usuario
    SET 
        username = p_username,
        password = p_password,
        nombre = p_nombre,
        apellido = p_apellido,
        correo = p_correo,
        telefono = p_telefono,
        activo = p_activo,
        id_rol = p_id_rol
    WHERE id_usuario = p_id_usuario;

    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20001, 'Usuario no encontrado.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20002, 'Error al modificar usuario: ' || SQLERRM);
END;

/
--------------------------------------------------------
--  DDL for Procedure MODIFICARVENTA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."MODIFICARVENTA" (
    p_id_venta NUMBER,
    p_subtotal NUMBER,
    p_iva NUMBER,
    p_total NUMBER
) AS
    v_calcula_total NUMBER;
BEGIN

    v_calcula_total := p_subtotal + (p_subtotal * p_iva);


    UPDATE venta
    SET 
        subtotal = p_subtotal,
        iva = p_iva,
        total = v_calcula_total
    WHERE id_venta = p_id_venta;

    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure REGISTRARACCESORIO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."REGISTRARACCESORIO" (
    p_nombre       IN VARCHAR2,
    p_descripcion  IN VARCHAR2,
    p_precio       IN NUMBER,
    p_stock        IN NUMBER,
    p_id_categoria IN NUMBER
) AS
BEGIN
    INSERT INTO accesorio (
        nombre,
        descripcion,
        precio,
        stock,
        id_categoria
    ) VALUES (
        p_nombre,
        p_descripcion,
        p_precio,
        p_stock,
        p_id_categoria
    );

    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure REGISTRARCATEGORIA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."REGISTRARCATEGORIA" (
    p_nombre       IN VARCHAR2,
    p_activo IN NUMBER,
    p_descripcion IN VARCHAR2
) AS
BEGIN
    INSERT INTO categoria (
        nombre,
        activo,
        descripcion
    ) VALUES (
        p_nombre,
        p_activo,
        p_descripcion
    );

    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure REGISTRARCLIENTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."REGISTRARCLIENTE" (
    p_nombre       IN VARCHAR2,
    p_apellido     IN VARCHAR2,
    p_telefono     IN VARCHAR2,
    p_correo       IN VARCHAR2,
    p_direccion    IN VARCHAR2,
    p_activo       IN NUMBER
) AS
BEGIN
    INSERT INTO cliente (
        NOMBRE,
        APELLIDO,
        TELEFONO,
        CORREO,
        DIRECCION,
        ACTIVO
    ) VALUES (
        p_nombre,
        p_apellido,
        p_telefono,
        p_correo,
        p_direccion,
        p_activo
    );

    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure REGISTRARDETALLEPEDIDO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."REGISTRARDETALLEPEDIDO" (
    p_id_pedido IN NUMBER,
    p_id_producto IN NUMBER,
    p_cantidad IN NUMBER,
    p_precio IN NUMBER
) AS
    v_pedido_exist NUMBER;
    v_producto_exist NUMBER;
    v_total NUMBER;
BEGIN

    SELECT COUNT(*)
    INTO v_pedido_exist
    FROM pedido
    WHERE id_pedido = p_id_pedido;

    SELECT COUNT(*)
    INTO v_producto_exist
    FROM producto
    WHERE id_producto = p_id_producto;

    IF v_pedido_exist = 1 AND v_producto_exist = 1 THEN
        v_total := p_cantidad * p_precio;

        INSERT INTO detalle_pedido (
            Id_pedido,
            Id_producto,
            cantidad,
            precio,
            total
        ) VALUES (
            p_id_pedido,
            p_id_producto,
            p_cantidad,
            p_precio,
            v_total
        );

        COMMIT;
    ELSE
        DBMS_OUTPUT.PUT_LINE('Error: El id_pedido o id_producto no existe.');
    END IF;
END;


/
--------------------------------------------------------
--  DDL for Procedure REGISTRARDEVOLUCION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."REGISTRARDEVOLUCION" (
    p_id_detalle      IN NUMBER,
    p_fecha_devolucion IN DATE,
    p_cantidad         IN NUMBER,
    p_motivo           IN VARCHAR2
)
IS
BEGIN
    INSERT INTO DBADMIN.DEVOLUCION (
        ID_DETALLE,
        FECHA_DEVOLUCION,
        CANTIDAD,
        MOTIVO
    ) VALUES (
        p_id_detalle,
        p_fecha_devolucion,
        p_cantidad,
        p_motivo
    );
    
    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('Devolución registrada exitosamente.');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error al registrar la devolución: ' || SQLERRM);
END REGISTRARDEVOLUCION;

/
--------------------------------------------------------
--  DDL for Procedure REGISTRAREMPLEADO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."REGISTRAREMPLEADO" (
    p_nombre        IN EMPLEADO.NOMBRE%TYPE,
    p_apellido      IN EMPLEADO.APELLIDO%TYPE,
    p_correo        IN EMPLEADO.CORREO%TYPE,
    p_telefono      IN EMPLEADO.TELEFONO%TYPE,
    p_id_sucursal   IN EMPLEADO.ID_SUCURSAL%TYPE,
    p_activo        IN EMPLEADO.ACTIVO%TYPE 
)
IS
BEGIN
    INSERT INTO EMPLEADO (
        NOMBRE,
        APELLIDO,
        CORREO,
        TELEFONO,
        ID_SUCURSAL,
        ACTIVO

    )
    VALUES (
        p_nombre,
        p_apellido,
        p_correo,
        p_telefono,
        p_id_sucursal,
        p_activo

    );

    COMMIT; -- Se asegura que la transacción se guarda
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK; -- Deshace la transacción en caso de error
        RAISE; -- Re-lanza la excepción para manejarla externamente si es necesario
END;

/
--------------------------------------------------------
--  DDL for Procedure REGISTRARPEDIDO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."REGISTRARPEDIDO" (
    p_id_cliente IN NUMBER,
    p_fecha_pedido IN DATE,
    p_estado IN NUMBER,
    p_id_pedido OUT NUMBER
) AS
    v_cliente_exist NUMBER;
BEGIN
    -- Verificar si el cliente existe
    SELECT COUNT(*)
    INTO v_cliente_exist
    FROM cliente
    WHERE id_cliente = p_id_cliente;

    IF v_cliente_exist > 0 THEN
        -- Obtener el siguiente valor de la secuencia
        SELECT secuencia_pedido.NEXTVAL INTO p_id_pedido FROM dual;

        -- Insertar el nuevo pedido
        INSERT INTO pedido (
            Id_pedido,
            Id_cliente,
            fecha_pedido,
            estado
        ) VALUES (
            p_id_pedido,
            p_id_cliente,
            p_fecha_pedido,
            p_estado
        );

        COMMIT; 
        DBMS_OUTPUT.PUT_LINE('Pedido registrado correctamente. ID_pedido: ' || p_id_pedido);
    ELSE
        DBMS_OUTPUT.PUT_LINE('El cliente no existe. No se puede registrar el pedido.');
        -- Si el cliente no existe, asignar NULL al parámetro de salida
        p_id_pedido := NULL;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al registrar el pedido: ' || SQLERRM);
        ROLLBACK; 
        -- Asignar NULL al parámetro de salida en caso de error
        p_id_pedido := NULL;
END;

/
--------------------------------------------------------
--  DDL for Procedure REGISTRARPRODUCTO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."REGISTRARPRODUCTO" (
    p_descripcion VARCHAR2,
    p_precio NUMBER,
    p_stock NUMBER,
    p_id_categoria NUMBER,
    p_id_sucursal NUMBER,
    p_activo NUMBER
)
IS
    v_categoria_exist NUMBER;
    v_sucursal_exist NUMBER;
BEGIN

    SELECT COUNT(*) INTO v_categoria_exist
    FROM categoria
    WHERE id_categoria = p_id_categoria;


    SELECT COUNT(*) INTO v_sucursal_exist
    FROM sucursal
    WHERE id_sucursal = p_id_sucursal;


    IF v_categoria_exist = 1 AND v_sucursal_exist = 1 THEN
        INSERT INTO producto (descripcion, precio, stock, id_categoria, id_sucursal, activo)
        VALUES (p_descripcion, p_precio, p_stock, p_id_categoria, p_id_sucursal, p_activo);
        COMMIT; 
        DBMS_OUTPUT.PUT_LINE('Producto registrado correctamente.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Error: La categoría o la sucursal especificada no existe.');
    END IF;
END registrarProducto;


/
--------------------------------------------------------
--  DDL for Procedure REGISTRARROL
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."REGISTRARROL" (
    p_id_rol IN NUMBER DEFAULT NULL,
    p_nombre IN VARCHAR2
)
IS
BEGIN
    INSERT INTO rol (id_rol, nombre)
    VALUES (p_id_rol, p_nombre);
    COMMIT;
END registrarRol;


/
--------------------------------------------------------
--  DDL for Procedure REGISTRARSUCURSAL
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."REGISTRARSUCURSAL" (
    p_nombre IN VARCHAR2,
    p_ubicacion IN VARCHAR2,
    p_telefono IN VARCHAR2
)
IS
    v_id_sucursal NUMBER;
BEGIN
    -- Obtener el próximo valor de la secuencia
    SELECT seq_id_sucursal.NEXTVAL INTO v_id_sucursal FROM dual;

    -- Insertar los datos en la tabla
    INSERT INTO sucursal (ID_SUCURSAL, NOMBRE, UBICACION, TELEFONO)
    VALUES (v_id_sucursal, p_nombre, p_ubicacion, p_telefono);

    -- Confirmar la transacción
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        -- Manejar cualquier error
        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20001, 'Error al registrar la sucursal: ' || SQLERRM);
END registrarSucursal;


/
--------------------------------------------------------
--  DDL for Procedure REGISTRARUSUARIO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."REGISTRARUSUARIO" (
    p_username IN VARCHAR2,
    p_password IN VARCHAR2,
    p_nombre   IN VARCHAR2,
    p_apellido IN VARCHAR2,
    p_correo   IN VARCHAR2,
    p_telefono IN VARCHAR2,
    p_id_rol   IN NUMBER  -- New parameter for ID_ROL
) AS
    v_id_cliente NUMBER;
BEGIN
    INSERT INTO usuario (
        username,
        password,
        nombre,
        apellido,
        correo,
        telefono,
        activo,
        id_rol  -- Insert ID_ROL into usuario table
    ) VALUES (
        p_username,
        p_password,
        p_nombre,
        p_apellido,
        p_correo,
        p_telefono,
        1,
        p_id_rol
    ); 
    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure REGISTRARVENTA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "DBADMIN"."REGISTRARVENTA" (
    p_id_venta IN NUMBER,
    p_subtotal IN NUMBER,
    p_iva IN NUMBER,
    p_id_cliente IN NUMBER,
    p_id_producto IN NUMBER
)
IS
    v_cliente_exist NUMBER;
    v_producto_exist NUMBER;
    v_total NUMBER;
BEGIN

    v_total := p_subtotal + (p_subtotal * p_iva);

    SELECT COUNT(*)
    INTO v_cliente_exist
    FROM cliente
    WHERE id_cliente = p_id_cliente;


    SELECT COUNT(*)
    INTO v_producto_exist
    FROM producto
    WHERE id_producto = p_id_producto;


    IF v_cliente_exist = 1 AND v_producto_exist = 1 THEN
        INSERT INTO venta (id_venta, subtotal, iva, total, id_cliente, id_producto)
        VALUES (p_id_venta, p_subtotal, p_iva, v_total, p_id_cliente, p_id_producto);
        COMMIT;

        DBMS_OUTPUT.PUT_LINE('Venta registrada correctamente.');
    ELSE

        DBMS_OUTPUT.PUT_LINE('Error: El cliente o el producto no existen.');
    END IF;

EXCEPTION
    WHEN OTHERS THEN

        DBMS_OUTPUT.PUT_LINE('Error: Ha ocurrido un error al intentar registrar la venta.');
END registrarVenta;


/
--------------------------------------------------------
--  DDL for Package CLIENTE_PKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "DBADMIN"."CLIENTE_PKG" AS
    PROCEDURE CONSULTARCLIENTES (
        p_resultado OUT SYS_REFCURSOR
    );

    PROCEDURE REGISTRARCLIENTE (
        p_nombre       IN VARCHAR2,
        p_apellido     IN VARCHAR2,
        p_telefono     IN VARCHAR2,
        p_correo       IN VARCHAR2,
        p_direccion    IN VARCHAR2,
        p_activo       IN NUMBER
    );

    PROCEDURE MODIFICARCLIENTE (
        p_id_cliente   IN NUMBER,
        p_nombre       IN VARCHAR2,
        p_apellido     IN VARCHAR2,
        p_telefono     IN VARCHAR2,
        p_correo       IN VARCHAR2,
        p_direccion    IN VARCHAR2,
        p_activo       IN NUMBER
    );

    PROCEDURE ELIMINARCLIENTE (
        p_id_cliente IN NUMBER
    );

    PROCEDURE FILTRARCLIENTES (
        p_id_cliente IN NUMBER,
        p_nombre IN VARCHAR2,
        p_apellido IN VARCHAR2,
        p_telefono IN VARCHAR2,
        p_correo IN VARCHAR2,
        p_resultado OUT SYS_REFCURSOR
    );
END CLIENTE_PKG;

/
--------------------------------------------------------
--  DDL for Package DEVOLUCION_PKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "DBADMIN"."DEVOLUCION_PKG" AS
    PROCEDURE REGISTRARDEVOLUCION (
        p_id_detalle      IN NUMBER,
        p_fecha_devolucion IN DATE,
        p_cantidad         IN NUMBER,
        p_motivo           IN VARCHAR2
    );

    PROCEDURE MODIFICARDEVOLUCION (
        p_id_devolucion    IN NUMBER,
        p_id_detalle       IN NUMBER,
        p_fecha_devolucion IN DATE,
        p_cantidad         IN NUMBER,
        p_motivo           IN VARCHAR2
    );

    PROCEDURE ELIMINARDEVOLUCION (
        p_id_devolucion IN NUMBER
    );
END DEVOLUCION_PKG;

/
--------------------------------------------------------
--  DDL for Package EMPLEADO_PKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "DBADMIN"."EMPLEADO_PKG" AS
    PROCEDURE REGISTRAREMPLEADO (
        p_nombre        IN EMPLEADO.NOMBRE%TYPE,
        p_apellido      IN EMPLEADO.APELLIDO%TYPE,
        p_correo        IN EMPLEADO.CORREO%TYPE,
        p_telefono      IN EMPLEADO.TELEFONO%TYPE,
        p_id_sucursal   IN EMPLEADO.ID_SUCURSAL%TYPE,
        p_activo        IN EMPLEADO.ACTIVO%TYPE
    );

    PROCEDURE ELIMINAREMPLEADO (
        p_id_empleado IN EMPLEADO.ID_EMPLEADO%TYPE
    );

    PROCEDURE MODIFICAREMPLEADO (
        p_id_empleado   IN EMPLEADO.ID_EMPLEADO%TYPE,
        p_nombre        IN EMPLEADO.NOMBRE%TYPE,
        p_apellido      IN EMPLEADO.APELLIDO%TYPE,
        p_correo        IN EMPLEADO.CORREO%TYPE,
        p_telefono      IN EMPLEADO.TELEFONO%TYPE,
        p_id_sucursal   IN EMPLEADO.ID_SUCURSAL%TYPE,
        p_activo        IN EMPLEADO.ACTIVO%TYPE
    );
END EMPLEADO_PKG;

/
--------------------------------------------------------
--  DDL for Package PKG_ACCESORIOS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "DBADMIN"."PKG_ACCESORIOS" AS
    -- Procedimiento para consultar accesorios
    PROCEDURE consultaraccesorios(p_resultado OUT SYS_REFCURSOR);

    -- Procedimiento para eliminar un accesorio
    PROCEDURE eliminaraccesorio(p_id_accesorio IN NUMBER);

    -- Procedimiento para modificar un accesorio
    PROCEDURE modificaraccesorio(
        p_id_accesorio   IN NUMBER,
        p_nombre         IN VARCHAR2,
        p_descripcion    IN VARCHAR2,
        p_precio         IN NUMBER,
        p_stock          IN NUMBER,
        p_id_categoria   IN NUMBER
    );

    -- Procedimiento para registrar un accesorio
    PROCEDURE registraraccesorio(
        p_nombre       IN VARCHAR2,
        p_descripcion  IN VARCHAR2,
        p_precio       IN NUMBER,
        p_stock        IN NUMBER,
        p_id_categoria IN NUMBER
    );
END pkg_accesorios;

/
--------------------------------------------------------
--  DDL for Package PKG_CATEGORIA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "DBADMIN"."PKG_CATEGORIA" AS
    -- Procedimiento para consultar categorías
    PROCEDURE consultarcategoria(p_resultado OUT SYS_REFCURSOR);

    -- Procedimiento para eliminar una categoría
    PROCEDURE eliminarcategoria(p_id_categoria IN NUMBER);

    -- Procedimiento para modificar una categoría
    PROCEDURE modificarcategoria(
        p_id_categoria   IN NUMBER,
        p_nombre         IN VARCHAR2,
        p_activo         IN NUMBER,
        p_descripcion    IN VARCHAR2
    );

    -- Procedimiento para registrar una categoría
    PROCEDURE registrarcategoria(
        p_nombre       IN VARCHAR2,
        p_activo       IN NUMBER,
        p_descripcion  IN VARCHAR2
    );
END pkg_categoria;

/
--------------------------------------------------------
--  DDL for Package PKG_DETALLE_PEDIDO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "DBADMIN"."PKG_DETALLE_PEDIDO" AS
    -- Procedimiento para consultar detalles de pedidos
    PROCEDURE consultardetallepedido(p_resultado OUT SYS_REFCURSOR);

    -- Procedimiento para eliminar un detalle de pedido
    PROCEDURE eliminardetallepedido(p_id_detalle IN NUMBER);

    -- Procedimiento para modificar un detalle de pedido
    PROCEDURE modificardetallepedido(
        p_id_detalle   IN NUMBER,
        p_cantidad     IN NUMBER,
        p_precio       IN NUMBER,
        p_total        IN NUMBER
    );

    -- Procedimiento para registrar un detalle de pedido
    PROCEDURE registrardetallepedido(
        p_id_pedido    IN NUMBER,
        p_id_producto  IN NUMBER,
        p_cantidad     IN NUMBER,
        p_precio       IN NUMBER
    );
END pkg_detalle_pedido;

/
--------------------------------------------------------
--  DDL for Package PKG_PEDIDOS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "DBADMIN"."PKG_PEDIDOS" AS
    -- Procedimiento para consultar pedidos
    PROCEDURE consultarpedidos(p_resultado OUT SYS_REFCURSOR);

    -- Procedimiento para eliminar un pedido
    PROCEDURE eliminarpedidos(p_id_pedido IN NUMBER);

    -- Procedimiento para modificar un pedido
    PROCEDURE modificarpedido(
        p_id_pedido   IN NUMBER,
        p_fecha_pedido IN DATE,
        p_estado       IN NUMBER
    );

    -- Procedimiento para registrar un pedido
    PROCEDURE registrarpedido(
        p_id_cliente   IN NUMBER,
        p_fecha_pedido IN DATE,
        p_estado       IN NUMBER
    );
     PROCEDURE FILTRARPEDIDOS (
        p_id_pedido IN NUMBER,
        p_id_cliente IN VARCHAR2,
        p_resultado OUT SYS_REFCURSOR
    );
    
    PROCEDURE REGISTRARPEDIDO (
        p_id_cliente IN NUMBER,
        p_fecha_pedido IN DATE,
        p_estado IN NUMBER,
        p_id_pedido OUT NUMBER
    );
    
    PROCEDURE FILTRARDETALLEPEDIDO (
        p_id_pedido IN NUMBER,
        p_resultado OUT SYS_REFCURSOR
    );
END pkg_pedidos;

/
--------------------------------------------------------
--  DDL for Package PKG_PRODUCTOS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "DBADMIN"."PKG_PRODUCTOS" AS
    -- Procedimiento para consultar productos
    PROCEDURE consultarproductos(p_resultado OUT SYS_REFCURSOR);

    -- Procedimiento para eliminar un producto
    PROCEDURE eliminarproducto(p_id_producto IN NUMBER);

    -- Procedimiento para modificar un producto
    PROCEDURE modificarproducto(
        p_id_producto    NUMBER,
        p_descripcion    VARCHAR2,
        p_precio         NUMBER,
        p_stock          NUMBER,
        p_id_categoria   NUMBER,
        p_id_sucursal    NUMBER,
        p_activo         NUMBER
    );

    -- Procedimiento para registrar un producto
    PROCEDURE registrarproducto(
        p_descripcion    VARCHAR2,
        p_precio         NUMBER,
        p_stock          NUMBER,
        p_id_categoria   NUMBER,
        p_id_sucursal    NUMBER,
        p_activo         NUMBER
    );
    PROCEDURE FiltrarProductos(
        p_id_producto   IN  PRODUCTO.ID_PRODUCTO%TYPE,
        p_descripcion   IN  PRODUCTO.DESCRIPCION%TYPE,
        cur_resultado   OUT SYS_REFCURSOR
    );
END pkg_productos;

/
--------------------------------------------------------
--  DDL for Package PKG_ROL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "DBADMIN"."PKG_ROL" AS

   -- Procedimiento para consultar roles
   PROCEDURE consultarRol(
       p_resultado OUT SYS_REFCURSOR
   );

   -- Procedimiento para eliminar un rol
   PROCEDURE eliminarRol(
       p_id_rol IN NUMBER
   );

   -- Procedimiento para modificar un rol
   PROCEDURE modificarRol(
       p_id_rol NUMBER,
       p_nombre VARCHAR2,
       p_id_usuario NUMBER
   );

   -- Procedimiento para registrar un rol
   PROCEDURE registrarRol(
       p_id_rol IN NUMBER DEFAULT NULL,
       p_nombre IN VARCHAR2
   );

END pkg_rol;

/
--------------------------------------------------------
--  DDL for Package PKG_SUCURSAL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "DBADMIN"."PKG_SUCURSAL" AS

   -- Procedimiento para consultar todas las sucursales
   PROCEDURE consultarSucursal(
       p_resultado OUT SYS_REFCURSOR
   );

   -- Procedimiento para eliminar una sucursal por su ID
   PROCEDURE eliminarSucursal(
       p_id_sucursal IN NUMBER
   );

   -- Procedimiento para modificar una sucursal
    PROCEDURE modificarsucursal(
        p_id_sucursal IN NUMBER,
        p_nombre IN VARCHAR2,
        p_ubicacion IN VARCHAR2,
        p_telefono IN VARCHAR2
    );

   -- Procedimiento para registrar una nueva sucursal
   PROCEDURE registrarSucursal(
       p_nombre IN VARCHAR2,
       p_direccion IN VARCHAR2,
       p_telefono IN VARCHAR2
   );

END pkg_sucursal;


/
--------------------------------------------------------
--  DDL for Package PKG_USUARIO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "DBADMIN"."PKG_USUARIO" AS

   -- Procedimiento para consultar un usuario por su nombre de usuario y contraseña
   PROCEDURE consultarUsuarioPorUsername(
       p_username IN VARCHAR2,
       p_password IN VARCHAR2,
       p_resultado OUT SYS_REFCURSOR
   );

   -- Procedimiento para consultar todos los usuarios
   PROCEDURE consultarUsuarios(
       p_resultado OUT SYS_REFCURSOR
   );

   -- Procedimiento para desactivar un usuario
   PROCEDURE desactivarUsuario(
       p_id_usuario IN usuario.id_usuario%TYPE
   );

   -- Procedimiento para eliminar un usuario
   PROCEDURE eliminarUsuario(
       p_id_usuario IN NUMBER
   );

   -- Procedimiento para modificar un usuario
   PROCEDURE modificarUsuario(
       p_id_usuario IN usuario.id_usuario%TYPE,
       p_username IN usuario.username%TYPE,
       p_nombre IN usuario.nombre%TYPE,
       p_apellido IN usuario.apellido%TYPE,
       p_correo IN usuario.correo%TYPE,
       p_telefono IN usuario.telefono%TYPE
   );

   -- Procedimiento para registrar un nuevo usuario
   PROCEDURE registrarUsuario(
       p_username IN VARCHAR2, 
       p_password IN VARCHAR2,
       p_nombre IN VARCHAR2,
       p_apellido IN VARCHAR2,
       p_correo IN VARCHAR2,
       p_telefono IN VARCHAR2,
       p_id_rol IN NUMBER  
   );
    PROCEDURE MODIFICARUSUARIO (
        p_id_usuario   IN usuario.id_usuario%TYPE,
        p_username     IN usuario.username%TYPE,
        p_password     IN usuario.password%TYPE,
        p_nombre       IN usuario.nombre%TYPE,
        p_apellido     IN usuario.apellido%TYPE,
        p_correo       IN usuario.correo%TYPE,
        p_telefono     IN usuario.telefono%TYPE,
        p_activo       IN usuario.activo%TYPE,
        p_id_rol       IN usuario.id_rol%TYPE
    );
    
END pkg_usuario;

/
--------------------------------------------------------
--  DDL for Package PKG_VENTA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "DBADMIN"."PKG_VENTA" AS

   -- Procedimiento para consultar todas las ventas
   PROCEDURE consultarVenta(
       p_resultado OUT SYS_REFCURSOR
   );

   -- Procedimiento para eliminar una venta por su ID
   PROCEDURE eliminarVenta(
       p_id_venta IN NUMBER
   );

   -- Procedimiento para modificar una venta
   PROCEDURE modificarVenta(
       p_id_venta IN NUMBER,
       p_subtotal IN NUMBER,
       p_iva IN NUMBER,
       p_total IN NUMBER
   );

   -- Procedimiento para registrar una nueva venta
   PROCEDURE registrarVenta(
       p_id_venta IN NUMBER,
       p_subtotal IN NUMBER,
       p_iva IN NUMBER,
       p_id_cliente IN NUMBER,
       p_id_producto IN NUMBER
   );

END pkg_venta;

/
--------------------------------------------------------
--  DDL for Package Body CLIENTE_PKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "DBADMIN"."CLIENTE_PKG" AS

    PROCEDURE CONSULTARCLIENTES (
        p_resultado OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_resultado FOR 
        SELECT 
            ID_CLIENTE,
            NOMBRE,
            APELLIDO,
            TELEFONO,
            CORREO,
            DIRECCION,
            ACTIVO
        FROM cliente;
    END CONSULTARCLIENTES;

    PROCEDURE REGISTRARCLIENTE (
        p_nombre       IN VARCHAR2,
        p_apellido     IN VARCHAR2,
        p_telefono     IN VARCHAR2,
        p_correo       IN VARCHAR2,
        p_direccion    IN VARCHAR2,
        p_activo       IN NUMBER
    ) AS
    BEGIN
        INSERT INTO cliente (
            NOMBRE,
            APELLIDO,
            TELEFONO,
            CORREO,
            DIRECCION,
            ACTIVO
        ) VALUES (
            p_nombre,
            p_apellido,
            p_telefono,
            p_correo,
            p_direccion,
            p_activo
        );

        COMMIT;
    END REGISTRARCLIENTE;

    PROCEDURE MODIFICARCLIENTE (
        p_id_cliente   IN NUMBER,
        p_nombre       IN VARCHAR2,
        p_apellido     IN VARCHAR2,
        p_telefono     IN VARCHAR2,
        p_correo       IN VARCHAR2,
        p_direccion    IN VARCHAR2,
        p_activo       IN NUMBER
    ) AS
    BEGIN
        UPDATE cliente
        SET 
            NOMBRE = p_nombre,
            APELLIDO = p_apellido,
            TELEFONO = p_telefono,
            CORREO = p_correo,
            DIRECCION = p_direccion,
            ACTIVO = p_activo
        WHERE ID_CLIENTE = p_id_cliente;

        COMMIT;
    END MODIFICARCLIENTE;

    PROCEDURE ELIMINARCLIENTE (
        p_id_cliente IN NUMBER
    ) AS
    BEGIN
        DELETE FROM cliente
        WHERE ID_CLIENTE = p_id_cliente;

        COMMIT;
    END ELIMINARCLIENTE;

    PROCEDURE FILTRARCLIENTES (
        p_id_cliente IN NUMBER,
        p_nombre IN VARCHAR2,
        p_apellido IN VARCHAR2,
        p_telefono IN VARCHAR2,
        p_correo IN VARCHAR2,
        p_resultado OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_resultado FOR
        SELECT
            ID_CLIENTE,
            UPPER(NOMBRE) as NOMBRE,
            UPPER(APELLIDO) as APELLIDO,
            TELEFONO,
            CORREO,
            UPPER(DIRECCION) as DIRECCION,
            ACTIVO
        FROM
            CLIENTE
        WHERE
            (p_id_cliente IS NULL OR ID_CLIENTE = p_id_cliente)
            AND (p_nombre IS NULL OR UPPER(NOMBRE || ' ' || APELLIDO) LIKE '%' || UPPER(p_nombre) || '%')
            AND (p_apellido IS NULL OR UPPER(APELLIDO) LIKE '%' || UPPER(p_apellido) || '%')
            AND (p_telefono IS NULL OR TELEFONO LIKE '%' || p_telefono || '%')
            AND (p_correo IS NULL OR CORREO LIKE '%' || p_correo || '%');
    END FILTRARCLIENTES;

END CLIENTE_PKG;

/
--------------------------------------------------------
--  DDL for Package Body DEVOLUCION_PKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "DBADMIN"."DEVOLUCION_PKG" AS

    PROCEDURE REGISTRARDEVOLUCION (
        p_id_detalle      IN NUMBER,
        p_fecha_devolucion IN DATE,
        p_cantidad         IN NUMBER,
        p_motivo           IN VARCHAR2
    )
    IS
    BEGIN
        INSERT INTO DBADMIN.DEVOLUCION (
            ID_DETALLE,
            FECHA_DEVOLUCION,
            CANTIDAD,
            MOTIVO
        ) VALUES (
            p_id_detalle,
            p_fecha_devolucion,
            p_cantidad,
            p_motivo
        );

        COMMIT;

        DBMS_OUTPUT.PUT_LINE('Devolución registrada exitosamente.');
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            DBMS_OUTPUT.PUT_LINE('Error al registrar la devolución: ' || SQLERRM);
    END REGISTRARDEVOLUCION;

    PROCEDURE MODIFICARDEVOLUCION (
        p_id_devolucion    IN NUMBER,
        p_id_detalle       IN NUMBER,
        p_fecha_devolucion IN DATE,
        p_cantidad         IN NUMBER,
        p_motivo           IN VARCHAR2
    )
    IS
    BEGIN
        UPDATE DBADMIN.DEVOLUCION
        SET
            ID_DETALLE = p_id_detalle,
            FECHA_DEVOLUCION = p_fecha_devolucion,
            CANTIDAD = p_cantidad,
            MOTIVO = p_motivo
        WHERE ID_DEVOLUCION = p_id_devolucion;

        IF SQL%ROWCOUNT = 0 THEN
            DBMS_OUTPUT.PUT_LINE('No se encontró una devolución con ID_DEVOLUCION = ' || p_id_devolucion);
        ELSE
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('Devolución actualizada exitosamente.');
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            DBMS_OUTPUT.PUT_LINE('Error al modificar la devolución: ' || SQLERRM);
    END MODIFICARDEVOLUCION;

    PROCEDURE ELIMINARDEVOLUCION (
        p_id_devolucion IN NUMBER
    )
    IS
    BEGIN
        DELETE FROM DBADMIN.DEVOLUCION
        WHERE ID_DEVOLUCION = p_id_devolucion;

        IF SQL%ROWCOUNT = 0 THEN
            DBMS_OUTPUT.PUT_LINE('No se encontró una devolución con ID_DEVOLUCION = ' || p_id_devolucion);
        ELSE
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('Devolución eliminada exitosamente.');
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            DBMS_OUTPUT.PUT_LINE('Error al eliminar la devolución: ' || SQLERRM);
    END ELIMINARDEVOLUCION;

END DEVOLUCION_PKG;

/
--------------------------------------------------------
--  DDL for Package Body EMPLEADO_PKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "DBADMIN"."EMPLEADO_PKG" AS

    PROCEDURE REGISTRAREMPLEADO (
        p_nombre        IN EMPLEADO.NOMBRE%TYPE,
        p_apellido      IN EMPLEADO.APELLIDO%TYPE,
        p_correo        IN EMPLEADO.CORREO%TYPE,
        p_telefono      IN EMPLEADO.TELEFONO%TYPE,
        p_id_sucursal   IN EMPLEADO.ID_SUCURSAL%TYPE,
        p_activo        IN EMPLEADO.ACTIVO%TYPE 
    )
    IS
    BEGIN
        INSERT INTO EMPLEADO (
            NOMBRE,
            APELLIDO,
            CORREO,
            TELEFONO,
            ID_SUCURSAL,
            ACTIVO
        )
        VALUES (
            p_nombre,
            p_apellido,
            p_correo,
            p_telefono,
            p_id_sucursal,
            p_activo
        );

        COMMIT; -- Se asegura que la transacción se guarda
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK; -- Deshace la transacción en caso de error
            RAISE; -- Re-lanza la excepción para manejarla externamente si es necesario
    END REGISTRAREMPLEADO;

    PROCEDURE ELIMINAREMPLEADO (
        p_id_empleado IN EMPLEADO.ID_EMPLEADO%TYPE
    )
    IS
    BEGIN
        DELETE FROM EMPLEADO
        WHERE ID_EMPLEADO = p_id_empleado;

        COMMIT; -- Asegura que los cambios se confirmen
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK; -- Deshace la transacción en caso de error
            RAISE;    -- Re-lanza la excepción para manejarla externamente si es necesario
    END ELIMINAREMPLEADO;

    PROCEDURE MODIFICAREMPLEADO (
        p_id_empleado   IN EMPLEADO.ID_EMPLEADO%TYPE,
        p_nombre        IN EMPLEADO.NOMBRE%TYPE,
        p_apellido      IN EMPLEADO.APELLIDO%TYPE,
        p_correo        IN EMPLEADO.CORREO%TYPE,
        p_telefono      IN EMPLEADO.TELEFONO%TYPE,
        p_id_sucursal   IN EMPLEADO.ID_SUCURSAL%TYPE,
        p_activo        IN EMPLEADO.ACTIVO%TYPE
    )
    IS
    BEGIN
        UPDATE EMPLEADO
        SET NOMBRE = p_nombre,
            APELLIDO = p_apellido,
            CORREO = p_correo,
            TELEFONO = p_telefono,
            ID_SUCURSAL = p_id_sucursal,
            ACTIVO = p_activo 
        WHERE ID_EMPLEADO = p_id_empleado;

        COMMIT; -- Asegura que los cambios se confirmen
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK; -- Deshace la transacción en caso de error
            RAISE;    -- Re-lanza la excepción para manejarla externamente si es necesario
    END MODIFICAREMPLEADO;

END EMPLEADO_PKG;

/
--------------------------------------------------------
--  DDL for Package Body PKG_ACCESORIOS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "DBADMIN"."PKG_ACCESORIOS" AS

   PROCEDURE consultaraccesorios( 
    p_resultado OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_resultado FOR SELECT
                             a.nombre,
                             a.descripcion,
                             a.precio,
                             a.stock,
                             c.nombre AS nombre_categoria
                         FROM
                                  accesorio a
                             JOIN categoria c ON a.id_categoria = c.id_categoria;

END consultaraccesorios;


  PROCEDURE eliminaraccesorio( 
    p_id_accesorio IN NUMBER
) AS
BEGIN
    DELETE FROM accesorio
    WHERE id_accesorio = p_id_accesorio;

    COMMIT;
END;


 PROCEDURE modificaraccesorio( 
    p_id_accesorio   IN NUMBER,
    p_nombre         IN VARCHAR2,
    p_descripcion    IN VARCHAR2,
    p_precio         IN NUMBER,
    p_stock          IN NUMBER,
    p_id_categoria   IN NUMBER
) AS
BEGIN
    UPDATE accesorio
    SET 
        nombre = p_nombre,
        descripcion = p_descripcion,
        precio = p_precio,
        stock = p_stock,
        id_categoria = p_id_categoria
    WHERE id_accesorio = p_id_accesorio;

    COMMIT;
END;


  PROCEDURE registraraccesorio( 
    p_nombre       IN VARCHAR2,
    p_descripcion  IN VARCHAR2,
    p_precio       IN NUMBER,
    p_stock        IN NUMBER,
    p_id_categoria IN NUMBER
) AS
BEGIN
    INSERT INTO accesorio (
        nombre,
        descripcion,
        precio,
        stock,
        id_categoria
    ) VALUES (
        p_nombre,
        p_descripcion,
        p_precio,
        p_stock,
        p_id_categoria
    );

    COMMIT;
END;

END pkg_accesorios;




/
--------------------------------------------------------
--  DDL for Package Body PKG_CATEGORIA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "DBADMIN"."PKG_CATEGORIA" AS

   PROCEDURE consultarcategoria( 
    p_resultado OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_resultado FOR SELECT
                             nombre,
                             activo,
                             descripcion
                         FROM
                                 categoria;

END consultarcategoria;


  PROCEDURE eliminarcategoria( 
    p_id_categoria IN NUMBER
) AS
BEGIN
    DELETE FROM categoria
    WHERE id_categoria = p_id_categoria;

    COMMIT;
END;


 PROCEDURE modificarcategoria( 
    p_id_categoria   IN NUMBER,
    p_nombre         IN VARCHAR2,
    p_activo         IN NUMBER,
    p_descripcion    IN VARCHAR2
) AS
BEGIN
    UPDATE categoria
    SET 
        nombre = p_nombre,
        activo = p_activo,
        descripcion = p_descripcion
    WHERE id_categoria = p_id_categoria;

    COMMIT;
END;


  PROCEDURE registrarcategoria( 
    p_nombre       IN VARCHAR2,
    p_activo       IN NUMBER,
    p_descripcion  IN VARCHAR2
) AS
BEGIN
    INSERT INTO categoria (
        nombre,
        activo,
        descripcion
    ) VALUES (
        p_nombre,
        p_activo,
        p_descripcion
    );

    COMMIT;
END;

END pkg_categoria;




/
--------------------------------------------------------
--  DDL for Package Body PKG_DETALLE_PEDIDO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "DBADMIN"."PKG_DETALLE_PEDIDO" AS

   PROCEDURE consultardetallepedido( 
    p_resultado OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_resultado FOR
    SELECT
        d.Id_detalle,
        d.Id_pedido,
        p.descripcion AS nombre_producto,
        d.cantidad,
        d.precio,
        d.total
    FROM
        detalle_pedido d
    JOIN
        producto p ON d.Id_producto = p.id_producto;
END consultardetallepedido;


  PROCEDURE eliminardetallepedido( 
    p_id_detalle IN NUMBER
) AS
BEGIN
    DELETE FROM detalle_pedido
    WHERE id_detalle = p_id_detalle;

    COMMIT;
END;


 PROCEDURE modificardetallepedido( 
    p_id_detalle   IN NUMBER,
    p_cantidad     IN NUMBER,
    p_precio       IN NUMBER,
    p_total        IN NUMBER
) AS
BEGIN
    UPDATE detalle_pedido
    SET 
        cantidad = p_cantidad,
        precio = p_precio,
        total = p_total
    WHERE id_detalle = p_id_detalle;

    COMMIT;
END;


  PROCEDURE registrardetallepedido( 
    p_id_pedido    IN NUMBER,
    p_id_producto  IN NUMBER,
    p_cantidad     IN NUMBER,
    p_precio       IN NUMBER
) AS
    v_pedido_exist   NUMBER;
    v_producto_exist NUMBER;
    v_total          NUMBER;
BEGIN

    SELECT COUNT(*)
    INTO v_pedido_exist
    FROM pedido
    WHERE id_pedido = p_id_pedido;

    SELECT COUNT(*)
    INTO v_producto_exist
    FROM producto
    WHERE id_producto = p_id_producto;

    IF v_pedido_exist = 1 AND v_producto_exist = 1 THEN
        v_total := p_cantidad * p_precio;

        INSERT INTO detalle_pedido (
            id_pedido,
            id_producto,
            cantidad,
            precio,
            total
        ) VALUES (
            p_id_pedido,
            p_id_producto,
            p_cantidad,
            p_precio,
            v_total
        );

        COMMIT;
    ELSE
        DBMS_OUTPUT.PUT_LINE('Error: El id_pedido o id_producto no existe.');
    END IF;
END;

END pkg_detalle_pedido;



/
--------------------------------------------------------
--  DDL for Package Body PKG_PEDIDOS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "DBADMIN"."PKG_PEDIDOS" AS

   PROCEDURE consultarpedidos( 
    p_resultado OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_resultado FOR
    SELECT
        Id_pedido,
        Id_cliente,
        fecha_pedido,
        estado
    FROM
        pedido;
END consultarpedidos;


  PROCEDURE eliminarpedidos( 
    p_id_pedido IN NUMBER
) AS
BEGIN
    DELETE FROM pedido
    WHERE id_pedido = p_id_pedido;

    COMMIT;
END;


 PROCEDURE modificarpedido( 
    p_id_pedido    IN NUMBER,
    p_fecha_pedido IN DATE,
    p_estado       IN NUMBER
) AS
BEGIN
    UPDATE pedido
    SET  
        fecha_pedido = SYSDATE,
        estado = p_estado
    WHERE id_pedido = p_id_pedido;

    COMMIT;
END;


  PROCEDURE registrarpedido( 
    p_id_cliente   IN NUMBER,
    p_fecha_pedido IN DATE,
    p_estado       IN NUMBER
) AS
    v_cliente_exist NUMBER;
    v_id_pedido     NUMBER;
BEGIN

    SELECT COUNT(*)
    INTO v_cliente_exist
    FROM cliente
    WHERE id_cliente = p_id_cliente;

    IF v_cliente_exist > 0 THEN

        SELECT secuencia_pedido.NEXTVAL INTO v_id_pedido FROM dual;

        INSERT INTO pedido (
            Id_pedido,
            Id_cliente,
            fecha_pedido,
            estado
        ) VALUES (
            v_id_pedido,
            p_id_cliente,
            SYSDATE,
            p_estado
        );

        COMMIT; 
        DBMS_OUTPUT.PUT_LINE('Pedido registrado correctamente. ID_pedido: ' || v_id_pedido);
    ELSE
        DBMS_OUTPUT.PUT_LINE('El cliente no existe. No se puede registrar el pedido.');
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al registrar el pedido: ' || SQLERRM);
        ROLLBACK; 
END;
PROCEDURE FILTRARPEDIDOS (
        p_id_pedido IN NUMBER,
        p_id_cliente IN VARCHAR2,
        p_resultado OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_resultado FOR
        SELECT 
            PEDIDO.ID_PEDIDO AS "Id del pedido", 
            CLIENTE.NOMBRE || ' ' || CLIENTE.APELLIDO AS "Nombre del cliente", 
            TO_CHAR(PEDIDO.FECHA_PEDIDO, 'DD/MM/YYYY') AS Fecha, 
            CASE 
                WHEN PEDIDO.ESTADO = 1 THEN 'Entregado'
                WHEN PEDIDO.ESTADO = 2 THEN 'Pendiente'
                WHEN PEDIDO.ESTADO = 3 THEN 'Cancelado'
                ELSE 'Desconocido'
            END AS Estado
        FROM 
            PEDIDO 
        JOIN 
            CLIENTE ON CLIENTE.ID_CLIENTE = PEDIDO.ID_CLIENTE
        WHERE
            (p_id_pedido IS NULL OR ID_PEDIDO = p_id_pedido)
            AND (p_id_cliente IS NULL OR UPPER(CLIENTE.NOMBRE || ' ' || CLIENTE.APELLIDO) LIKE '%' || UPPER(p_id_cliente) || '%');
    END FILTRARPEDIDOS;

    PROCEDURE REGISTRARPEDIDO (
        p_id_cliente IN NUMBER,
        p_fecha_pedido IN DATE,
        p_estado IN NUMBER,
        p_id_pedido OUT NUMBER
    ) AS
        v_cliente_exist NUMBER;
    BEGIN
        -- Verificar si el cliente existe
        SELECT COUNT(*)
        INTO v_cliente_exist
        FROM cliente
        WHERE id_cliente = p_id_cliente;

        IF v_cliente_exist > 0 THEN
            -- Obtener el siguiente valor de la secuencia
            SELECT secuencia_pedido.NEXTVAL INTO p_id_pedido FROM dual;

            -- Insertar el nuevo pedido
            INSERT INTO pedido (
                Id_pedido,
                Id_cliente,
                fecha_pedido,
                estado
            ) VALUES (
                p_id_pedido,
                p_id_cliente,
                p_fecha_pedido,
                p_estado
            );

            COMMIT; 
            DBMS_OUTPUT.PUT_LINE('Pedido registrado correctamente. ID_pedido: ' || p_id_pedido);
        ELSE
            DBMS_OUTPUT.PUT_LINE('El cliente no existe. No se puede registrar el pedido.');
            -- Si el cliente no existe, asignar NULL al parámetro de salida
            p_id_pedido := NULL;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al registrar el pedido: ' || SQLERRM);
            ROLLBACK; 
            -- Asignar NULL al parámetro de salida en caso de error
            p_id_pedido := NULL;
    END REGISTRARPEDIDO;

    PROCEDURE FILTRARDETALLEPEDIDO (
        p_id_pedido IN NUMBER,
        p_resultado OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_resultado FOR
        SELECT 
            d.ID_DETALLE AS "ID",
            p.DESCRIPCION AS "Descripcion",
            d.CANTIDAD AS "Cantidad",
            d.PRECIO AS "Precio",
            d.TOTAL AS "Total"
        FROM 
            DETALLE_PEDIDO d
        JOIN 
            PRODUCTO p ON p.ID_PRODUCTO = d.id_producto
        WHERE 
            ID_PEDIDO = p_id_pedido;
    END FILTRARDETALLEPEDIDO;
END pkg_pedidos;

/
--------------------------------------------------------
--  DDL for Package Body PKG_PRODUCTOS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "DBADMIN"."PKG_PRODUCTOS" AS

   PROCEDURE consultarproductos( 
    p_resultado OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_resultado FOR
    SELECT
        Id_producto,
        Descripcion,
        Precio,
        Stock,
        Id_categoria,
        Id_sucursal,
        activo
    FROM
        producto;
END consultarproductos;


  PROCEDURE eliminarproducto( 
    p_id_producto IN NUMBER
) AS
BEGIN
    DELETE FROM producto
    WHERE id_producto = p_id_producto;

    COMMIT;
END;


 PROCEDURE modificarproducto( 
    p_id_producto    NUMBER,
    p_descripcion    VARCHAR2,
    p_precio         NUMBER,
    p_stock          NUMBER,
    p_id_categoria   NUMBER,
    p_id_sucursal    NUMBER,
    p_activo         NUMBER
) AS
BEGIN
    UPDATE producto
    SET  
        descripcion = p_descripcion, 
        precio = p_precio,
        stock = p_stock,
        id_categoria = p_id_categoria,
        id_sucursal = p_id_sucursal,
        activo = p_activo
    WHERE id_producto = p_id_producto;

    COMMIT;
END;


  PROCEDURE registrarproducto( 
    p_descripcion    VARCHAR2,
    p_precio         NUMBER,
    p_stock          NUMBER,
    p_id_categoria   NUMBER,
    p_id_sucursal    NUMBER,
    p_activo         NUMBER
) IS
    v_categoria_exist NUMBER;
    v_sucursal_exist NUMBER;
BEGIN

    SELECT COUNT(*)
    INTO v_categoria_exist
    FROM categoria
    WHERE id_categoria = p_id_categoria;

    SELECT COUNT(*)
    INTO v_sucursal_exist
    FROM sucursal
    WHERE id_sucursal = p_id_sucursal;

    IF v_categoria_exist = 1 AND v_sucursal_exist = 1 THEN
        INSERT INTO producto (
            descripcion,
            precio,
            stock,
            id_categoria,
            id_sucursal,
            activo
        ) VALUES (
            p_descripcion,
            p_precio,
            p_stock,
            p_id_categoria,
            p_id_sucursal,
            p_activo
        );
        COMMIT; 
        DBMS_OUTPUT.PUT_LINE('Producto registrado correctamente.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Error: La categoría o la sucursal especificada no existe.');
    END IF;
END registrarproducto;
 PROCEDURE FiltrarProductos(
        p_id_producto   IN  PRODUCTO.ID_PRODUCTO%TYPE,
        p_descripcion   IN  PRODUCTO.DESCRIPCION%TYPE,
        cur_resultado   OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN cur_resultado FOR
        SELECT 
            ID_PRODUCTO, 
            DESCRIPCION, 
            PRECIO, 
            STOCK, 
            ID_CATEGORIA, 
            ID_SUCURSAL, 
            ACTIVO
        FROM 
            PRODUCTO
        WHERE 
            ACTIVO = 1
            AND (ID_PRODUCTO = p_id_producto OR p_id_producto IS NULL)
            AND (UPPER(DESCRIPCION) LIKE '%' || UPPER(p_descripcion) || '%' OR p_descripcion IS NULL);
    END FiltrarProductos;
END pkg_productos;

/
--------------------------------------------------------
--  DDL for Package Body PKG_ROL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "DBADMIN"."PKG_ROL" AS

   -- Procedimiento para consultar roles
   PROCEDURE consultarRol( 
    p_resultado OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_resultado FOR
    SELECT
        Id_rol,
        Nombre
    FROM
        rol;
END consultarRol;


   -- Procedimiento para eliminar un rol
   PROCEDURE eliminarRol( 
    p_id_rol IN NUMBER
) AS
BEGIN
    DELETE FROM rol
    WHERE id_rol = p_id_rol;

    COMMIT;
END eliminarRol;


   -- Procedimiento para modificar un rol
   PROCEDURE modificarRol( 
    p_id_rol NUMBER,
    p_nombre VARCHAR2,
    p_id_usuario NUMBER
) AS
BEGIN
    UPDATE rol
    SET 
        nombre = p_nombre   
    WHERE id_rol = p_id_rol;

    COMMIT;
END modificarRol;


   -- Procedimiento para registrar un rol
   PROCEDURE registrarRol( 
    p_id_rol IN NUMBER DEFAULT NULL,
    p_nombre IN VARCHAR2
) IS
BEGIN
    INSERT INTO rol (id_rol, nombre)
    VALUES (p_id_rol, p_nombre);
    COMMIT;
END registrarRol;

END pkg_rol;

/
--------------------------------------------------------
--  DDL for Package Body PKG_SUCURSAL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "DBADMIN"."PKG_SUCURSAL" AS
 PROCEDURE eliminarsucursal ( -- CREATE OR REPLACE NONEDITIONABLE 
    p_id_sucursal IN NUMBER
) AS
BEGIN
    DELETE FROM sucursal
    WHERE id_sucursal = p_id_sucursal;
    COMMIT;
END;

PROCEDURE consultarsucursal (-- CREATE OR REPLACE NONEDITIONABLE
    p_resultado OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_resultado FOR
    SELECT
        Id_sucursal,
        Nombre,
        ubicacion,
        telefono
    FROM
        sucursal;
END;
   PROCEDURE modificarsucursal(
        p_id_sucursal IN NUMBER,
        p_nombre IN VARCHAR2,
        p_ubicacion IN VARCHAR2,
        p_telefono IN VARCHAR2
    ) AS
    BEGIN
        UPDATE sucursal
        SET 
            nombre = p_nombre,
            ubicacion = p_ubicacion,
            telefono = p_telefono
        WHERE id_sucursal = p_id_sucursal;

        -- Confirmar la transacción
        COMMIT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20002, 'Sucursal no encontrada.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20003, 'Error al modificar la sucursal: ' || SQLERRM);
    END modificarsucursal;

 PROCEDURE registrarSucursal(
        p_nombre IN VARCHAR2,
        p_direccion IN VARCHAR2,
        p_telefono IN VARCHAR2
    ) IS
        v_id_sucursal NUMBER;
    BEGIN
        -- Obtener el próximo valor de la secuencia
        SELECT seq_id_sucursal.NEXTVAL INTO v_id_sucursal FROM dual;

        -- Insertar los datos en la tabla
        INSERT INTO sucursal (ID_SUCURSAL, NOMBRE, UBICACION, TELEFONO)
        VALUES (v_id_sucursal, p_nombre, p_direccion, p_telefono);

        -- Confirmar la transacción
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            -- Manejar cualquier error
            ROLLBACK;
            RAISE_APPLICATION_ERROR(-20001, 'Error al registrar la sucursal: ' || SQLERRM);
    END registrarSucursal;
END pkg_sucursal;

/
--------------------------------------------------------
--  DDL for Package Body PKG_USUARIO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "DBADMIN"."PKG_USUARIO" AS

   PROCEDURE consultarUsuarioPorUsername(
       p_username IN VARCHAR2,
       p_password IN VARCHAR2,
       p_resultado OUT SYS_REFCURSOR
   ) AS
   BEGIN
       OPEN p_resultado FOR
       SELECT
           username,
           password,
           nombre,
           apellido,
           correo,
           telefono,
           activo,
           id_rol,
           id_usuario
       FROM
           usuario
       WHERE
           username = p_username AND password = p_password;
   END consultarUsuarioPorUsername;

   PROCEDURE consultarUsuarios(
       p_resultado OUT SYS_REFCURSOR
   ) AS
   BEGIN
       OPEN p_resultado FOR
       SELECT
           username,
           nombre,
           apellido,
           activo
       FROM
           usuario;
   END consultarUsuarios;

   PROCEDURE desactivarUsuario(
       p_id_usuario IN usuario.id_usuario%TYPE
   ) AS
   BEGIN
       UPDATE usuario
       SET 
           activo = 0   -- Set activo column to 0 (deactivate user)
       WHERE id_usuario = p_id_usuario;

       COMMIT;
   EXCEPTION
       WHEN NO_DATA_FOUND THEN
           RAISE_APPLICATION_ERROR(-20001, 'Usuario no encontrado.');
       WHEN OTHERS THEN
           RAISE_APPLICATION_ERROR(-20002, 'Error al desactivar usuario: ' || SQLERRM);
   END desactivarUsuario;

   PROCEDURE eliminarUsuario(
       p_id_usuario IN NUMBER
   ) AS
   BEGIN
       DELETE FROM usuario
       WHERE id_usuario = p_id_usuario;

       COMMIT;
   END eliminarUsuario;

   PROCEDURE modificarUsuario(
       p_id_usuario IN usuario.id_usuario%TYPE,
       p_username IN usuario.username%TYPE,
       p_nombre IN usuario.nombre%TYPE,
       p_apellido IN usuario.apellido%TYPE,
       p_correo IN usuario.correo%TYPE,
       p_telefono IN usuario.telefono%TYPE
   ) AS
   BEGIN
       UPDATE usuario
       SET 
           username = p_username,
           nombre = p_nombre,
           apellido = p_apellido,
           correo = p_correo,
           telefono = p_telefono
       WHERE id_usuario = p_id_usuario;

       COMMIT;
   EXCEPTION
       WHEN NO_DATA_FOUND THEN
           RAISE_APPLICATION_ERROR(-20001, 'Usuario no encontrado.');
       WHEN OTHERS THEN
           RAISE_APPLICATION_ERROR(-20002, 'Error al modificar usuario: ' || SQLERRM);
   END modificarUsuario;

   PROCEDURE registrarUsuario(
       p_username IN VARCHAR2, 
       p_password IN VARCHAR2,
       p_nombre IN VARCHAR2,
       p_apellido IN VARCHAR2,
       p_correo IN VARCHAR2,
       p_telefono IN VARCHAR2,
       p_id_rol IN NUMBER  
   ) AS
   BEGIN
       INSERT INTO usuario (
           username,
           password,
           nombre,
           apellido,
           correo,
           telefono,
           activo,
           id_rol  
       ) VALUES (
           p_username,
           p_password,
           p_nombre,
           p_apellido,
           p_correo,
           p_telefono,
           1,
           p_id_rol
       );    
       COMMIT;
   END registrarUsuario;
PROCEDURE MODIFICARUSUARIO (
        p_id_usuario   IN usuario.id_usuario%TYPE,
        p_username     IN usuario.username%TYPE,
        p_password     IN usuario.password%TYPE,
        p_nombre       IN usuario.nombre%TYPE,
        p_apellido     IN usuario.apellido%TYPE,
        p_correo       IN usuario.correo%TYPE,
        p_telefono     IN usuario.telefono%TYPE,
        p_activo       IN usuario.activo%TYPE,
        p_id_rol       IN usuario.id_rol%TYPE
    ) AS
    BEGIN
        UPDATE usuario
        SET 
            username = p_username,
            password = p_password,
            nombre = p_nombre,
            apellido = p_apellido,
            correo = p_correo,
            telefono = p_telefono,
            activo = p_activo,
            id_rol = p_id_rol
        WHERE id_usuario = p_id_usuario;

        COMMIT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20001, 'Usuario no encontrado.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20002, 'Error al modificar usuario: ' || SQLERRM);
    END MODIFICARUSUARIO;
END pkg_usuario;

/
--------------------------------------------------------
--  DDL for Package Body PKG_VENTA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "DBADMIN"."PKG_VENTA" AS

   PROCEDURE consultarVenta(
       p_resultado OUT SYS_REFCURSOR
   ) AS
   BEGIN
       OPEN p_resultado FOR
       SELECT
           Id_venta,
           subtotal,
           iva,
           total,
           id_cliente,
           id_producto
       FROM
           venta;
   END consultarVenta;

   PROCEDURE eliminarVenta(
       p_id_venta IN NUMBER
   ) AS
   BEGIN
       DELETE FROM venta
       WHERE id_venta = p_id_venta;

       COMMIT;
   END eliminarVenta;

   PROCEDURE modificarVenta(
       p_id_venta IN NUMBER,
       p_subtotal IN NUMBER,
       p_iva IN NUMBER,
       p_total IN NUMBER
   ) AS
       v_calcula_total NUMBER;
   BEGIN
       v_calcula_total := p_subtotal + (p_subtotal * p_iva);

       UPDATE venta
       SET 
           subtotal = p_subtotal,
           iva = p_iva,
           total = v_calcula_total
       WHERE id_venta = p_id_venta;

       COMMIT;
   END modificarVenta;

   PROCEDURE registrarVenta(
       p_id_venta IN NUMBER,
       p_subtotal IN NUMBER,
       p_iva IN NUMBER,
       p_id_cliente IN NUMBER,
       p_id_producto IN NUMBER
   ) IS
       v_cliente_exist NUMBER;
       v_producto_exist NUMBER;
       v_total NUMBER;
   BEGIN
       v_total := p_subtotal + (p_subtotal * p_iva);

       SELECT COUNT(*)
       INTO v_cliente_exist
       FROM cliente
       WHERE id_cliente = p_id_cliente;

       SELECT COUNT(*)
       INTO v_producto_exist
       FROM producto
       WHERE id_producto = p_id_producto;

       IF v_cliente_exist = 1 AND v_producto_exist = 1 THEN
           INSERT INTO venta (
               id_venta,
               subtotal,
               iva,
               total,
               id_cliente,
               id_producto
           ) VALUES (
               p_id_venta,
               p_subtotal,
               p_iva,
               v_total,
               p_id_cliente,
               p_id_producto
           );
           COMMIT;

           DBMS_OUTPUT.PUT_LINE('Venta registrada correctamente.');
       ELSE
           DBMS_OUTPUT.PUT_LINE('Error: El cliente o el producto no existen.');
       END IF;

   EXCEPTION
       WHEN OTHERS THEN
           DBMS_OUTPUT.PUT_LINE('Error: Ha ocurrido un error al intentar registrar la venta.');
   END registrarVenta;

END pkg_venta;


/
--------------------------------------------------------
--  DDL for Function CALCULAR_IVA_VENTA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "DBADMIN"."CALCULAR_IVA_VENTA" (p_id_venta IN NUMBER) RETURN NUMBER IS
   iva NUMBER;
BEGIN
   SELECT iva INTO iva
   FROM venta
   WHERE id_venta = p_id_venta;
   RETURN iva;
END; 

/
--------------------------------------------------------
--  DDL for Function CLIENTE_ACTIVO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "DBADMIN"."CLIENTE_ACTIVO" (p_id_cliente IN NUMBER) RETURN BOOLEAN IS
   activo_cliente NUMBER;
BEGIN
   SELECT activo INTO activo_cliente
   FROM cliente
   WHERE id_cliente = p_id_cliente;
   RETURN activo_cliente = 1;
END; 

/
--------------------------------------------------------
--  DDL for Function CONTAR_PEDIDOS_CLIENTE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "DBADMIN"."CONTAR_PEDIDOS_CLIENTE" (p_id_cliente IN NUMBER) RETURN NUMBER IS
   numero_pedidos NUMBER;
BEGIN
   SELECT COUNT(*) INTO numero_pedidos
   FROM pedido
   WHERE id_cliente = p_id_cliente;
   RETURN numero_pedidos;
END; 

/
--------------------------------------------------------
--  DDL for Function OBTENER_DESCRIPCION_CATEGORIA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "DBADMIN"."OBTENER_DESCRIPCION_CATEGORIA" (p_id_categoria IN NUMBER) RETURN VARCHAR2 IS
   descripcion_categoria VARCHAR2(500);
BEGIN
   SELECT descripcion INTO descripcion_categoria
   FROM categoria
   WHERE id_categoria = p_id_categoria;
   RETURN descripcion_categoria;
END; 

/
--------------------------------------------------------
--  DDL for Function OBTENER_ESTADO_PEDIDO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "DBADMIN"."OBTENER_ESTADO_PEDIDO" (p_id_pedido IN NUMBER) RETURN VARCHAR2 IS
   estado VARCHAR2(20);
BEGIN
   SELECT estado INTO estado
   FROM pedido
   WHERE id_pedido = p_id_pedido;
   RETURN estado;
END; 

/
--------------------------------------------------------
--  DDL for Function OBTENER_NOMBRE_COMPLETO_CLIENTE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "DBADMIN"."OBTENER_NOMBRE_COMPLETO_CLIENTE" (p_id_cliente IN NUMBER) RETURN VARCHAR2 IS
   nombre_completo VARCHAR2(200);
BEGIN
   SELECT nombre || ' ' || apellido INTO nombre_completo
   FROM cliente
   WHERE id_cliente = p_id_cliente;
   RETURN nombre_completo;
END;

/
--------------------------------------------------------
--  DDL for Function OBTENER_NOMBRE_COMPLETO_EMPLEADO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "DBADMIN"."OBTENER_NOMBRE_COMPLETO_EMPLEADO" (p_id_empleado IN NUMBER) RETURN VARCHAR2 IS
   nombre_completo_empleado VARCHAR2(200);
BEGIN
   SELECT nombre || ' ' || apellido INTO nombre_completo_empleado
   FROM empleado
   WHERE id_empleado = p_id_empleado;
   RETURN nombre_completo_empleado;
END; 

/
--------------------------------------------------------
--  DDL for Function OBTENER_NOMBRE_PRODUCTO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "DBADMIN"."OBTENER_NOMBRE_PRODUCTO" (p_id_producto IN NUMBER) RETURN VARCHAR2 IS
   nombre_producto VARCHAR2(500);
BEGIN
   SELECT descripcion INTO nombre_producto
   FROM producto
   WHERE id_producto = p_id_producto;
   RETURN nombre_producto;
END; 

/
--------------------------------------------------------
--  DDL for Function OBTENER_NOMBRE_SUCURSAL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "DBADMIN"."OBTENER_NOMBRE_SUCURSAL" (p_id_sucursal IN NUMBER) RETURN VARCHAR2 IS
   nombre_sucursal VARCHAR2(100);
BEGIN
   SELECT nombre INTO nombre_sucursal
   FROM sucursal
   WHERE id_sucursal = p_id_sucursal;
   RETURN nombre_sucursal;
END; 

/
--------------------------------------------------------
--  DDL for Function OBTENER_TOTAL_PEDIDO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "DBADMIN"."OBTENER_TOTAL_PEDIDO" (p_id_pedido IN NUMBER) RETURN NUMBER IS
   total NUMBER;
BEGIN
   SELECT SUM(cantidad * precio) INTO total
   FROM detalle_pedido
   WHERE id_pedido = p_id_pedido;
   RETURN total;
END; 

/
--------------------------------------------------------
--  DDL for Function PRODUCTO_EN_STOCK
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "DBADMIN"."PRODUCTO_EN_STOCK" (p_id_producto IN NUMBER) RETURN BOOLEAN IS
   stock_producto NUMBER;
BEGIN
   SELECT stock INTO stock_producto
   FROM producto
   WHERE id_producto = p_id_producto;
   RETURN stock_producto > 0;
END; 

/
--------------------------------------------------------
--  DDL for Function TOTAL_DEVOLUCIONES_PRODUCTO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "DBADMIN"."TOTAL_DEVOLUCIONES_PRODUCTO" (p_id_producto IN NUMBER) RETURN NUMBER IS
   total_devoluciones NUMBER;
BEGIN
   SELECT SUM(dp.cantidad) INTO total_devoluciones
   FROM devolucion d
   JOIN detalle_pedido dp ON d.id_detalle = dp.id_detalle
   WHERE dp.id_producto = p_id_producto;
   RETURN total_devoluciones;
END; 

/
--------------------------------------------------------
--  DDL for Function TOTAL_INGRESOS_SUCURSAL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "DBADMIN"."TOTAL_INGRESOS_SUCURSAL" (p_id_sucursal IN NUMBER) RETURN NUMBER IS
   ingresos_totales NUMBER;
BEGIN
   SELECT SUM(v.total) INTO ingresos_totales
   FROM venta v
   JOIN producto p ON v.id_producto = p.id_producto
   WHERE p.id_sucursal = p_id_sucursal;
   RETURN ingresos_totales;
END; 

/
--------------------------------------------------------
--  DDL for Function TOTAL_STOCK_PRODUCTOS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "DBADMIN"."TOTAL_STOCK_PRODUCTOS" RETURN NUMBER IS
   total_stock NUMBER;
BEGIN
   SELECT SUM(stock) INTO total_stock
   FROM producto;
   RETURN total_stock;
END; 

/
--------------------------------------------------------
--  DDL for Function TOTAL_VENTAS_CLIENTE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "DBADMIN"."TOTAL_VENTAS_CLIENTE" (p_id_cliente IN NUMBER) RETURN NUMBER IS
   total_ventas NUMBER;
BEGIN
   SELECT SUM(total) INTO total_ventas
   FROM venta
   WHERE id_cliente = p_id_cliente;
   RETURN total_ventas;
END; 

/
--------------------------------------------------------
--  Constraints for Table AUDITORIA_SUCURSAL
--------------------------------------------------------

  ALTER TABLE "DBADMIN"."AUDITORIA_SUCURSAL" MODIFY ("ID_AUDITORIA" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table AUDITORIA_EMPLEADO
--------------------------------------------------------

  ALTER TABLE "DBADMIN"."AUDITORIA_EMPLEADO" MODIFY ("ID_AUDITORIA" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ROL
--------------------------------------------------------

  ALTER TABLE "DBADMIN"."ROL" MODIFY ("ID_ROL" NOT NULL ENABLE);
  ALTER TABLE "DBADMIN"."ROL" ADD CONSTRAINT "PK_ROL" PRIMARY KEY ("ID_ROL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PEDIDO
--------------------------------------------------------

  ALTER TABLE "DBADMIN"."PEDIDO" MODIFY ("ID_PEDIDO" NOT NULL ENABLE);
  ALTER TABLE "DBADMIN"."PEDIDO" ADD CONSTRAINT "PK_PEDIDO" PRIMARY KEY ("ID_PEDIDO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table EMPLEADO
--------------------------------------------------------

  ALTER TABLE "DBADMIN"."EMPLEADO" MODIFY ("ID_EMPLEADO" NOT NULL ENABLE);
  ALTER TABLE "DBADMIN"."EMPLEADO" ADD CONSTRAINT "PK_EMPLEADO" PRIMARY KEY ("ID_EMPLEADO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table AUDIT_SESION
--------------------------------------------------------

  ALTER TABLE "DBADMIN"."AUDIT_SESION" MODIFY ("ID_AUDIT" NOT NULL ENABLE);
  ALTER TABLE "DBADMIN"."AUDIT_SESION" MODIFY ("USERNAME" NOT NULL ENABLE);
  ALTER TABLE "DBADMIN"."AUDIT_SESION" MODIFY ("OPERATION" NOT NULL ENABLE);
  ALTER TABLE "DBADMIN"."AUDIT_SESION" MODIFY ("SESSION_ID" NOT NULL ENABLE);
  ALTER TABLE "DBADMIN"."AUDIT_SESION" ADD PRIMARY KEY ("ID_AUDIT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CATEGORIA
--------------------------------------------------------

  ALTER TABLE "DBADMIN"."CATEGORIA" MODIFY ("ID_CATEGORIA" NOT NULL ENABLE);
  ALTER TABLE "DBADMIN"."CATEGORIA" ADD CONSTRAINT "PK_CATEGORIA" PRIMARY KEY ("ID_CATEGORIA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ACCESORIO
--------------------------------------------------------

  ALTER TABLE "DBADMIN"."ACCESORIO" MODIFY ("ID_ACCESORIO" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table AUDITORIA_ROL
--------------------------------------------------------

  ALTER TABLE "DBADMIN"."AUDITORIA_ROL" MODIFY ("ID_AUDITORIA" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CLIENTE
--------------------------------------------------------

  ALTER TABLE "DBADMIN"."CLIENTE" MODIFY ("ID_CLIENTE" NOT NULL ENABLE);
  ALTER TABLE "DBADMIN"."CLIENTE" ADD CONSTRAINT "PK_CLIENTE" PRIMARY KEY ("ID_CLIENTE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table SUCURSAL
--------------------------------------------------------

  ALTER TABLE "DBADMIN"."SUCURSAL" MODIFY ("ID_SUCURSAL" NOT NULL ENABLE);
  ALTER TABLE "DBADMIN"."SUCURSAL" ADD CONSTRAINT "PK_SUCURSAL" PRIMARY KEY ("ID_SUCURSAL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table VENTA
--------------------------------------------------------

  ALTER TABLE "DBADMIN"."VENTA" MODIFY ("ID_VENTA" NOT NULL ENABLE);
  ALTER TABLE "DBADMIN"."VENTA" ADD CONSTRAINT "PK_VENTA" PRIMARY KEY ("ID_VENTA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "LenguajeDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table DEVOLUCION
--------------------------------------------------------

  ALTER TABLE "DBADMIN"."DEVOLUCION" MODIFY ("ID_DEVOLUCION" NOT NULL ENABLE);
  ALTER TABLE "DBADMIN"."DEVOLUCION" ADD CONSTRAINT "PK_DEVOLUCION" PRIMARY KEY ("ID_DEVOLUCION")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PRODUCTO
--------------------------------------------------------

  ALTER TABLE "DBADMIN"."PRODUCTO" MODIFY ("ID_PRODUCTO" NOT NULL ENABLE);
  ALTER TABLE "DBADMIN"."PRODUCTO" ADD CONSTRAINT "PK_PRODUCTO" PRIMARY KEY ("ID_PRODUCTO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table DETALLE_PEDIDO
--------------------------------------------------------

  ALTER TABLE "DBADMIN"."DETALLE_PEDIDO" MODIFY ("ID_DETALLE" NOT NULL ENABLE);
  ALTER TABLE "DBADMIN"."DETALLE_PEDIDO" ADD CONSTRAINT "PK_DETALLE_PEDIDO" PRIMARY KEY ("ID_DETALLE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table USUARIO
--------------------------------------------------------

  ALTER TABLE "DBADMIN"."USUARIO" MODIFY ("ID_USUARIO" NOT NULL ENABLE);
  ALTER TABLE "DBADMIN"."USUARIO" ADD CONSTRAINT "PK_USUARIO" PRIMARY KEY ("ID_USUARIO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table AUDITORIA_USUARIOS
--------------------------------------------------------

  ALTER TABLE "DBADMIN"."AUDITORIA_USUARIOS" MODIFY ("ID_AUDITORIA" NOT NULL ENABLE);
  ALTER TABLE "DBADMIN"."AUDITORIA_USUARIOS" ADD PRIMARY KEY ("ID_AUDITORIA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LenguajeDB"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ACCESORIO
--------------------------------------------------------

  ALTER TABLE "DBADMIN"."ACCESORIO" ADD CONSTRAINT "FK_CATEGORIA_ACCESORIO" FOREIGN KEY ("ID_CATEGORIA")
	  REFERENCES "DBADMIN"."CATEGORIA" ("ID_CATEGORIA") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table DETALLE_PEDIDO
--------------------------------------------------------

  ALTER TABLE "DBADMIN"."DETALLE_PEDIDO" ADD FOREIGN KEY ("ID_PEDIDO")
	  REFERENCES "DBADMIN"."PEDIDO" ("ID_PEDIDO") ENABLE;
  ALTER TABLE "DBADMIN"."DETALLE_PEDIDO" ADD FOREIGN KEY ("ID_PRODUCTO")
	  REFERENCES "DBADMIN"."PRODUCTO" ("ID_PRODUCTO") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table EMPLEADO
--------------------------------------------------------

  ALTER TABLE "DBADMIN"."EMPLEADO" ADD FOREIGN KEY ("ID_SUCURSAL")
	  REFERENCES "DBADMIN"."SUCURSAL" ("ID_SUCURSAL") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PEDIDO
--------------------------------------------------------

  ALTER TABLE "DBADMIN"."PEDIDO" ADD FOREIGN KEY ("ID_CLIENTE")
	  REFERENCES "DBADMIN"."CLIENTE" ("ID_CLIENTE") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PRODUCTO
--------------------------------------------------------

  ALTER TABLE "DBADMIN"."PRODUCTO" ADD FOREIGN KEY ("ID_CATEGORIA")
	  REFERENCES "DBADMIN"."CATEGORIA" ("ID_CATEGORIA") ENABLE;
  ALTER TABLE "DBADMIN"."PRODUCTO" ADD FOREIGN KEY ("ID_SUCURSAL")
	  REFERENCES "DBADMIN"."SUCURSAL" ("ID_SUCURSAL") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USUARIO
--------------------------------------------------------

  ALTER TABLE "DBADMIN"."USUARIO" ADD CONSTRAINT "FK_USUARIO_ROL" FOREIGN KEY ("ID_ROL")
	  REFERENCES "DBADMIN"."ROL" ("ID_ROL") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table VENTA
--------------------------------------------------------

  ALTER TABLE "DBADMIN"."VENTA" ADD FOREIGN KEY ("ID_PRODUCTO")
	  REFERENCES "DBADMIN"."PRODUCTO" ("ID_PRODUCTO") ENABLE;
  ALTER TABLE "DBADMIN"."VENTA" ADD FOREIGN KEY ("ID_CLIENTE")
	  REFERENCES "DBADMIN"."CLIENTE" ("ID_CLIENTE") ENABLE;
